
dht11-rtos-401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080030d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          000040a8  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000411c  2000411c  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015321  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003125  00000000  00000000  000353c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008a9a  00000000  00000000  000384ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00040f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00041d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006b0b  00000000  00000000  00042da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005714  00000000  00000000  000498b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004efc7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b74  00000000  00000000  0004f044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002fec 	.word	0x08002fec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08002fec 	.word	0x08002fec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x30>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005b2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f81b 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f002 f81e 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f001 ffae 	bl	8002528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005cc:	2000      	movs	r0, #0
 80005ce:	bd08      	pop	{r3, pc}
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <HAL_IncTick+0x10>)
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_IncTick+0x14>)
 80005d8:	6811      	ldr	r1, [r2, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	440b      	add	r3, r1
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000403c 	.word	0x2000403c
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000403c 	.word	0x2000403c

080005f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	0200      	lsls	r0, r0, #8
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000612:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	68dc      	ldr	r4, [r3, #12]
 8000622:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000626:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	2b04      	cmp	r3, #4
 800062e:	bf28      	it	cs
 8000630:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 0501 	mov.w	r5, #1
 8000638:	fa05 f303 	lsl.w	r3, r5, r3
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	4019      	ands	r1, r3
 8000648:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800064a:	fa05 f404 	lsl.w	r4, r5, r4
 800064e:	3c01      	subs	r4, #1
 8000650:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000652:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfad      	iteet	ge
 800065e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	f000 000f 	andlt.w	r0, r0, #15
 8000666:	4b06      	ldrlt	r3, [pc, #24]	; (8000680 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	bfb5      	itete	lt
 800066e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000684:	2800      	cmp	r0, #0
 8000686:	db08      	blt.n	800069a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000688:	0942      	lsrs	r2, r0, #5
 800068a:	2301      	movs	r3, #1
 800068c:	f000 001f 	and.w	r0, r0, #31
 8000690:	fa03 f000 	lsl.w	r0, r3, r0
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <HAL_NVIC_EnableIRQ+0x18>)
 8000696:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000838 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4a60      	ldr	r2, [pc, #384]	; (8000830 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006b0:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b4:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b6:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b8:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006bc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006be:	42ac      	cmp	r4, r5
 80006c0:	f040 80a6 	bne.w	8000810 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c4:	684c      	ldr	r4, [r1, #4]
 80006c6:	f024 0c10 	bic.w	ip, r4, #16
 80006ca:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006ce:	2e01      	cmp	r6, #1
 80006d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006d4:	d812      	bhi.n	80006fc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d8:	2603      	movs	r6, #3
 80006da:	fa06 f60e 	lsl.w	r6, r6, lr
 80006de:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006e2:	68ce      	ldr	r6, [r1, #12]
 80006e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006ea:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ec:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006f2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f6:	409e      	lsls	r6, r3
 80006f8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006fa:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006fe:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000700:	fa06 f60e 	lsl.w	r6, r6, lr
 8000704:	43f6      	mvns	r6, r6
 8000706:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800070a:	688f      	ldr	r7, [r1, #8]
 800070c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000710:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000714:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000718:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800071a:	d116      	bne.n	800074a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800071c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000720:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000728:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800072c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000730:	f04f 0c0f 	mov.w	ip, #15
 8000734:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000738:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800073c:	690f      	ldr	r7, [r1, #16]
 800073e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000742:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000746:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800074a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074e:	f004 0703 	and.w	r7, r4, #3
 8000752:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000756:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800075a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075c:	00e6      	lsls	r6, r4, #3
 800075e:	d557      	bpl.n	8000810 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f04f 0b00 	mov.w	fp, #0
 8000764:	f8cd b00c 	str.w	fp, [sp, #12]
 8000768:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	4e31      	ldr	r6, [pc, #196]	; (8000834 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000772:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000776:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800077a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800077e:	9703      	str	r7, [sp, #12]
 8000780:	9f03      	ldr	r7, [sp, #12]
 8000782:	f023 0703 	bic.w	r7, r3, #3
 8000786:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800078a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000792:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000796:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800079a:	f04f 0e0f 	mov.w	lr, #15
 800079e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a8:	d039      	beq.n	800081e <HAL_GPIO_Init+0x17e>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d037      	beq.n	8000822 <HAL_GPIO_Init+0x182>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d035      	beq.n	8000826 <HAL_GPIO_Init+0x186>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d033      	beq.n	800082a <HAL_GPIO_Init+0x18a>
 80007c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c6:	42b0      	cmp	r0, r6
 80007c8:	bf14      	ite	ne
 80007ca:	2607      	movne	r6, #7
 80007cc:	2604      	moveq	r6, #4
 80007ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80007d2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007d8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007da:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007dc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf0c      	ite	eq
 80007e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007e4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007e6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007e8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ee:	bf0c      	ite	eq
 80007f0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007f4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf0c      	ite	eq
 80007fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000802:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000804:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000806:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf54      	ite	pl
 800080a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800080e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000810:	3301      	adds	r3, #1
 8000812:	2b10      	cmp	r3, #16
 8000814:	f47f af4f 	bne.w	80006b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000818:	b005      	add	sp, #20
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081e:	465e      	mov	r6, fp
 8000820:	e7d5      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 8000822:	2601      	movs	r6, #1
 8000824:	e7d3      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 8000826:	2602      	movs	r6, #2
 8000828:	e7d1      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 800082a:	2603      	movs	r6, #3
 800082c:	e7cf      	b.n	80007ce <HAL_GPIO_Init+0x12e>
 800082e:	bf00      	nop
 8000830:	40013c00 	.word	0x40013c00
 8000834:	40020000 	.word	0x40020000
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800083c:	6903      	ldr	r3, [r0, #16]
 800083e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000840:	bf14      	ite	ne
 8000842:	2001      	movne	r0, #1
 8000844:	2000      	moveq	r0, #0
 8000846:	4770      	bx	lr

08000848 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000848:	b10a      	cbz	r2, 800084e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800084a:	6181      	str	r1, [r0, #24]
 800084c:	4770      	bx	lr
 800084e:	0409      	lsls	r1, r1, #16
 8000850:	e7fb      	b.n	800084a <HAL_GPIO_WritePin+0x2>
	...

08000854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000858:	4604      	mov	r4, r0
 800085a:	b908      	cbnz	r0, 8000860 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800085c:	2001      	movs	r0, #1
 800085e:	e03f      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000860:	6803      	ldr	r3, [r0, #0]
 8000862:	07dd      	lsls	r5, r3, #31
 8000864:	d410      	bmi.n	8000888 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	0798      	lsls	r0, r3, #30
 800086a:	d45a      	bmi.n	8000922 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	071a      	lsls	r2, r3, #28
 8000870:	f100 809c 	bmi.w	80009ac <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	075b      	lsls	r3, r3, #29
 8000878:	f100 80ba 	bmi.w	80009f0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800087c:	69a0      	ldr	r0, [r4, #24]
 800087e:	2800      	cmp	r0, #0
 8000880:	f040 811b 	bne.w	8000aba <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000884:	2000      	movs	r0, #0
 8000886:	e02b      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000888:	4ba4      	ldr	r3, [pc, #656]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f002 020c 	and.w	r2, r2, #12
 8000890:	2a04      	cmp	r2, #4
 8000892:	d007      	beq.n	80008a4 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800089a:	2a08      	cmp	r2, #8
 800089c:	d10a      	bne.n	80008b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	0259      	lsls	r1, r3, #9
 80008a2:	d507      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a4:	4b9d      	ldr	r3, [pc, #628]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	039a      	lsls	r2, r3, #14
 80008aa:	d5dc      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1d9      	bne.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008b2:	e7d3      	b.n	800085c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	4d99      	ldr	r5, [pc, #612]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 80008b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008bc:	d113      	bne.n	80008e6 <HAL_RCC_OscConfig+0x92>
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008c6:	f7ff fe91 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	4d94      	ldr	r5, [pc, #592]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	682b      	ldr	r3, [r5, #0]
 80008d0:	039b      	lsls	r3, r3, #14
 80008d2:	d4c8      	bmi.n	8000866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fe8a 	bl	80005ec <HAL_GetTick>
 80008d8:	1b80      	subs	r0, r0, r6
 80008da:	2864      	cmp	r0, #100	; 0x64
 80008dc:	d9f7      	bls.n	80008ce <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008de:	2003      	movs	r0, #3
}
 80008e0:	b002      	add	sp, #8
 80008e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ea:	d104      	bne.n	80008f6 <HAL_RCC_OscConfig+0xa2>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f2:	602b      	str	r3, [r5, #0]
 80008f4:	e7e3      	b.n	80008be <HAL_RCC_OscConfig+0x6a>
 80008f6:	682a      	ldr	r2, [r5, #0]
 80008f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008fc:	602a      	str	r2, [r5, #0]
 80008fe:	682a      	ldr	r2, [r5, #0]
 8000900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000904:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1dd      	bne.n	80008c6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800090a:	f7ff fe6f 	bl	80005ec <HAL_GetTick>
 800090e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	039f      	lsls	r7, r3, #14
 8000914:	d5a7      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000916:	f7ff fe69 	bl	80005ec <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	2864      	cmp	r0, #100	; 0x64
 800091e:	d9f7      	bls.n	8000910 <HAL_RCC_OscConfig+0xbc>
 8000920:	e7dd      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000922:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	f012 0f0c 	tst.w	r2, #12
 800092a:	d007      	beq.n	800093c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000932:	2a08      	cmp	r2, #8
 8000934:	d111      	bne.n	800095a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	025e      	lsls	r6, r3, #9
 800093a:	d40e      	bmi.n	800095a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093c:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	0795      	lsls	r5, r2, #30
 8000942:	d502      	bpl.n	800094a <HAL_RCC_OscConfig+0xf6>
 8000944:	68e2      	ldr	r2, [r4, #12]
 8000946:	2a01      	cmp	r2, #1
 8000948:	d188      	bne.n	800085c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	6921      	ldr	r1, [r4, #16]
 800094e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000952:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000956:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000958:	e788      	b.n	800086c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800095a:	68e2      	ldr	r2, [r4, #12]
 800095c:	4b70      	ldr	r3, [pc, #448]	; (8000b20 <HAL_RCC_OscConfig+0x2cc>)
 800095e:	b1b2      	cbz	r2, 800098e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fe42 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	4d6c      	ldr	r5, [pc, #432]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800096a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	0798      	lsls	r0, r3, #30
 8000970:	d507      	bpl.n	8000982 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	6922      	ldr	r2, [r4, #16]
 8000976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800097e:	602b      	str	r3, [r5, #0]
 8000980:	e774      	b.n	800086c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000982:	f7ff fe33 	bl	80005ec <HAL_GetTick>
 8000986:	1b80      	subs	r0, r0, r6
 8000988:	2802      	cmp	r0, #2
 800098a:	d9ef      	bls.n	800096c <HAL_RCC_OscConfig+0x118>
 800098c:	e7a7      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800098e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fe2c 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	4d61      	ldr	r5, [pc, #388]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	0799      	lsls	r1, r3, #30
 800099c:	f57f af66 	bpl.w	800086c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a0:	f7ff fe24 	bl	80005ec <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d9f6      	bls.n	8000998 <HAL_RCC_OscConfig+0x144>
 80009aa:	e798      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009ac:	6962      	ldr	r2, [r4, #20]
 80009ae:	4b5d      	ldr	r3, [pc, #372]	; (8000b24 <HAL_RCC_OscConfig+0x2d0>)
 80009b0:	b17a      	cbz	r2, 80009d2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009b6:	f7ff fe19 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	4d58      	ldr	r5, [pc, #352]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c0:	079f      	lsls	r7, r3, #30
 80009c2:	f53f af57 	bmi.w	8000874 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c6:	f7ff fe11 	bl	80005ec <HAL_GetTick>
 80009ca:	1b80      	subs	r0, r0, r6
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9f6      	bls.n	80009be <HAL_RCC_OscConfig+0x16a>
 80009d0:	e785      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d4:	f7ff fe0a 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d8:	4d50      	ldr	r5, [pc, #320]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009de:	0798      	lsls	r0, r3, #30
 80009e0:	f57f af48 	bpl.w	8000874 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e4:	f7ff fe02 	bl	80005ec <HAL_GetTick>
 80009e8:	1b80      	subs	r0, r0, r6
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9f6      	bls.n	80009dc <HAL_RCC_OscConfig+0x188>
 80009ee:	e776      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009f8:	d128      	bne.n	8000a4c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a0e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a10:	4d45      	ldr	r5, [pc, #276]	; (8000b28 <HAL_RCC_OscConfig+0x2d4>)
 8000a12:	682b      	ldr	r3, [r5, #0]
 8000a14:	05d9      	lsls	r1, r3, #23
 8000a16:	d51b      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a18:	68a3      	ldr	r3, [r4, #8]
 8000a1a:	4d40      	ldr	r5, [pc, #256]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d127      	bne.n	8000a70 <HAL_RCC_OscConfig+0x21c>
 8000a20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a28:	f7ff fde0 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a2c:	4d3b      	ldr	r5, [pc, #236]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a2e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a30:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d539      	bpl.n	8000aae <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f43f af1e 	beq.w	800087c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a40:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 8000a42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	e717      	b.n	800087c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	e7df      	b.n	8000a10 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fdc8 	bl	80005ec <HAL_GetTick>
 8000a5c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	05da      	lsls	r2, r3, #23
 8000a62:	d4d9      	bmi.n	8000a18 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a64:	f7ff fdc2 	bl	80005ec <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f7      	bls.n	8000a5e <HAL_RCC_OscConfig+0x20a>
 8000a6e:	e736      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d104      	bne.n	8000a7e <HAL_RCC_OscConfig+0x22a>
 8000a74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a7c:	e7d0      	b.n	8000a20 <HAL_RCC_OscConfig+0x1cc>
 8000a7e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a80:	f022 0201 	bic.w	r2, r2, #1
 8000a84:	672a      	str	r2, [r5, #112]	; 0x70
 8000a86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a88:	f022 0204 	bic.w	r2, r2, #4
 8000a8c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1ca      	bne.n	8000a28 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a92:	f7ff fdab 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a96:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	d5cb      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa2:	f7ff fda3 	bl	80005ec <HAL_GetTick>
 8000aa6:	1bc0      	subs	r0, r0, r7
 8000aa8:	4540      	cmp	r0, r8
 8000aaa:	d9f7      	bls.n	8000a9c <HAL_RCC_OscConfig+0x248>
 8000aac:	e717      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aae:	f7ff fd9d 	bl	80005ec <HAL_GetTick>
 8000ab2:	1bc0      	subs	r0, r0, r7
 8000ab4:	4540      	cmp	r0, r8
 8000ab6:	d9bd      	bls.n	8000a34 <HAL_RCC_OscConfig+0x1e0>
 8000ab8:	e711      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aba:	4d18      	ldr	r5, [pc, #96]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
 8000abc:	68ab      	ldr	r3, [r5, #8]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d047      	beq.n	8000b56 <HAL_RCC_OscConfig+0x302>
 8000ac6:	4e19      	ldr	r6, [pc, #100]	; (8000b2c <HAL_RCC_OscConfig+0x2d8>)
 8000ac8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000acc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ace:	d135      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd8c 	bl	80005ec <HAL_GetTick>
 8000ad4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	0199      	lsls	r1, r3, #6
 8000ada:	d429      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000adc:	6a22      	ldr	r2, [r4, #32]
 8000ade:	69e3      	ldr	r3, [r4, #28]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ae4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ae8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af2:	0852      	lsrs	r2, r2, #1
 8000af4:	3a01      	subs	r2, #1
 8000af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000afc:	2301      	movs	r3, #1
 8000afe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b00:	f7ff fd74 	bl	80005ec <HAL_GetTick>
 8000b04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	019a      	lsls	r2, r3, #6
 8000b0a:	f53f aebb 	bmi.w	8000884 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0e:	f7ff fd6d 	bl	80005ec <HAL_GetTick>
 8000b12:	1b40      	subs	r0, r0, r5
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d9f6      	bls.n	8000b06 <HAL_RCC_OscConfig+0x2b2>
 8000b18:	e6e1      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	42470000 	.word	0x42470000
 8000b24:	42470e80 	.word	0x42470e80
 8000b28:	40007000 	.word	0x40007000
 8000b2c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fd5c 	bl	80005ec <HAL_GetTick>
 8000b34:	1bc0      	subs	r0, r0, r7
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9cd      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x282>
 8000b3a:	e6d0      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fd56 	bl	80005ec <HAL_GetTick>
 8000b40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	f57f ae9d 	bpl.w	8000884 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fd4f 	bl	80005ec <HAL_GetTick>
 8000b4e:	1b00      	subs	r0, r0, r4
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9f6      	bls.n	8000b42 <HAL_RCC_OscConfig+0x2ee>
 8000b54:	e6c3      	b.n	80008de <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b56:	2801      	cmp	r0, #1
 8000b58:	f43f aec2 	beq.w	80008e0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b5c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f47f ae79 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
 8000b6a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b6c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b70:	4293      	cmp	r3, r2
 8000b72:	f47f ae73 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b7c:	4003      	ands	r3, r0
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f47f ae6c 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b86:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	f47f ae66 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b92:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b96:	1ac0      	subs	r0, r0, r3
 8000b98:	bf18      	it	ne
 8000b9a:	2001      	movne	r0, #1
 8000b9c:	e6a0      	b.n	80008e0 <HAL_RCC_OscConfig+0x8c>
 8000b9e:	bf00      	nop

08000ba0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba0:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ba2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba4:	688b      	ldr	r3, [r1, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d003      	beq.n	8000bb6 <HAL_RCC_GetSysClockFreq+0x16>
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	d003      	beq.n	8000bba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bb4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bb8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bbc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc4:	bf14      	ite	ne
 8000bc6:	480c      	ldrne	r0, [pc, #48]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc8:	480a      	ldreq	r0, [pc, #40]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bce:	bf18      	it	ne
 8000bd0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd6:	fba1 0100 	umull	r0, r1, r1, r0
 8000bda:	f7ff fb59 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000be6:	3301      	adds	r3, #1
 8000be8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bee:	bd08      	pop	{r3, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	00f42400 	.word	0x00f42400
 8000bf8:	007a1200 	.word	0x007a1200

08000bfc <HAL_RCC_ClockConfig>:
{
 8000bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c02:	4604      	mov	r4, r0
 8000c04:	b910      	cbnz	r0, 8000c0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c0c:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f002 020f 	and.w	r2, r2, #15
 8000c14:	428a      	cmp	r2, r1
 8000c16:	d329      	bcc.n	8000c6c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	078f      	lsls	r7, r1, #30
 8000c1c:	d42e      	bmi.n	8000c7c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c1e:	07c8      	lsls	r0, r1, #31
 8000c20:	d441      	bmi.n	8000ca6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <HAL_RCC_ClockConfig+0x124>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f002 020f 	and.w	r2, r2, #15
 8000c2a:	4295      	cmp	r5, r2
 8000c2c:	d367      	bcc.n	8000cfe <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	0751      	lsls	r1, r2, #29
 8000c32:	d46d      	bmi.n	8000d10 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c34:	0713      	lsls	r3, r2, #28
 8000c36:	d507      	bpl.n	8000c48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c38:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000c3a:	6921      	ldr	r1, [r4, #16]
 8000c3c:	6893      	ldr	r3, [r2, #8]
 8000c3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c48:	f7ff ffaa 	bl	8000ba0 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000c4e:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <HAL_RCC_ClockConfig+0x12c>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	40d8      	lsrs	r0, r3
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_RCC_ClockConfig+0x130>)
 8000c5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_RCC_ClockConfig+0x134>)
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	f001 fccf 	bl	8002604 <HAL_InitTick>
  return HAL_OK;
 8000c66:	2000      	movs	r0, #0
 8000c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6c:	b2ca      	uxtb	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d1c5      	bne.n	8000c06 <HAL_RCC_ClockConfig+0xa>
 8000c7a:	e7cd      	b.n	8000c18 <HAL_RCC_ClockConfig+0x1c>
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c82:	bf1e      	ittt	ne
 8000c84:	689a      	ldrne	r2, [r3, #8]
 8000c86:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c8a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c8c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c8e:	bf42      	ittt	mi
 8000c90:	689a      	ldrmi	r2, [r3, #8]
 8000c92:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c96:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	68a0      	ldr	r0, [r4, #8]
 8000c9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ca0:	4302      	orrs	r2, r0
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e7bb      	b.n	8000c1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca6:	6862      	ldr	r2, [r4, #4]
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000caa:	2a01      	cmp	r2, #1
 8000cac:	d11d      	bne.n	8000cea <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	d0a7      	beq.n	8000c06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb6:	4e1b      	ldr	r6, [pc, #108]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000cb8:	68b3      	ldr	r3, [r6, #8]
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cc2:	f7ff fc93 	bl	80005ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ccc:	68b3      	ldr	r3, [r6, #8]
 8000cce:	6862      	ldr	r2, [r4, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cd8:	d0a3      	beq.n	8000c22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cda:	f7ff fc87 	bl	80005ec <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	4540      	cmp	r0, r8
 8000ce2:	d9f3      	bls.n	8000ccc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000ce4:	2003      	movs	r0, #3
}
 8000ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cea:	1e91      	subs	r1, r2, #2
 8000cec:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cee:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf0:	d802      	bhi.n	8000cf8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cf6:	e7dd      	b.n	8000cb4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	f013 0f02 	tst.w	r3, #2
 8000cfc:	e7da      	b.n	8000cb4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfe:	b2ea      	uxtb	r2, r5
 8000d00:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	429d      	cmp	r5, r3
 8000d0a:	f47f af7c 	bne.w	8000c06 <HAL_RCC_ClockConfig+0xa>
 8000d0e:	e78e      	b.n	8000c2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <HAL_RCC_ClockConfig+0x128>)
 8000d12:	68e0      	ldr	r0, [r4, #12]
 8000d14:	688b      	ldr	r3, [r1, #8]
 8000d16:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d1a:	4303      	orrs	r3, r0
 8000d1c:	608b      	str	r3, [r1, #8]
 8000d1e:	e789      	b.n	8000c34 <HAL_RCC_ClockConfig+0x38>
 8000d20:	40023c00 	.word	0x40023c00
 8000d24:	40023800 	.word	0x40023800
 8000d28:	0800307b 	.word	0x0800307b
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d42:	6810      	ldr	r0, [r2, #0]
}
 8000d44:	40d8      	lsrs	r0, r3
 8000d46:	4770      	bx	lr
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	0800308b 	.word	0x0800308b
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d62:	6810      	ldr	r0, [r2, #0]
}
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	0800308b 	.word	0x0800308b
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d74:	230f      	movs	r3, #15
 8000d76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_RCC_GetClockConfig+0x34>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_RCC_GetClockConfig+0x38>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000dbe:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	681a      	ldrne	r2, [r3, #0]
 8000dc4:	f042 0201 	orrne.w	r2, r2, #1
 8000dc8:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dd4:	6803      	ldr	r3, [r0, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000de4:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000de6:	bf1e      	ittt	ne
 8000de8:	681a      	ldrne	r2, [r3, #0]
 8000dea:	f042 0201 	orrne.w	r2, r2, #1
 8000dee:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr

08000df4 <HAL_TIM_OC_DelayElapsedCallback>:
 8000df4:	4770      	bx	lr

08000df6 <HAL_TIM_IC_CaptureCallback>:
 8000df6:	4770      	bx	lr

08000df8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000df8:	4770      	bx	lr

08000dfa <HAL_TIM_TriggerCallback>:
 8000dfa:	4770      	bx	lr

08000dfc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dfc:	6803      	ldr	r3, [r0, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	0791      	lsls	r1, r2, #30
{
 8000e02:	b510      	push	{r4, lr}
 8000e04:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e06:	d50e      	bpl.n	8000e26 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	0792      	lsls	r2, r2, #30
 8000e0c:	d50b      	bpl.n	8000e26 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e0e:	f06f 0202 	mvn.w	r2, #2
 8000e12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e14:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e16:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e18:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e1a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e1c:	d077      	beq.n	8000f0e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000e1e:	f7ff ffea 	bl	8000df6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e22:	2300      	movs	r3, #0
 8000e24:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	0750      	lsls	r0, r2, #29
 8000e2c:	d510      	bpl.n	8000e50 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	0751      	lsls	r1, r2, #29
 8000e32:	d50d      	bpl.n	8000e50 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e34:	f06f 0204 	mvn.w	r2, #4
 8000e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e3a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e3c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e3e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e42:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e46:	d068      	beq.n	8000f1a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e48:	f7ff ffd5 	bl	8000df6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	0712      	lsls	r2, r2, #28
 8000e56:	d50f      	bpl.n	8000e78 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	0710      	lsls	r0, r2, #28
 8000e5c:	d50c      	bpl.n	8000e78 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e5e:	f06f 0208 	mvn.w	r2, #8
 8000e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e64:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e66:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e68:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e6a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e6c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e6e:	d05a      	beq.n	8000f26 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e70:	f7ff ffc1 	bl	8000df6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e74:	2300      	movs	r3, #0
 8000e76:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	06d2      	lsls	r2, r2, #27
 8000e7e:	d510      	bpl.n	8000ea2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	06d0      	lsls	r0, r2, #27
 8000e84:	d50d      	bpl.n	8000ea2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e86:	f06f 0210 	mvn.w	r2, #16
 8000e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e8c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e8e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e90:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e94:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e96:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e98:	d04b      	beq.n	8000f32 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e9a:	f7ff ffac 	bl	8000df6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	07d1      	lsls	r1, r2, #31
 8000ea8:	d508      	bpl.n	8000ebc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	07d2      	lsls	r2, r2, #31
 8000eae:	d505      	bpl.n	8000ebc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000eb0:	f06f 0201 	mvn.w	r2, #1
 8000eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f001 fb2c 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	0610      	lsls	r0, r2, #24
 8000ec2:	d508      	bpl.n	8000ed6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	0611      	lsls	r1, r2, #24
 8000ec8:	d505      	bpl.n	8000ed6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000eca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f000 f976 	bl	80011c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	0652      	lsls	r2, r2, #25
 8000edc:	d508      	bpl.n	8000ef0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	0650      	lsls	r0, r2, #25
 8000ee2:	d505      	bpl.n	8000ef0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff85 	bl	8000dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	0691      	lsls	r1, r2, #26
 8000ef6:	d522      	bpl.n	8000f3e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	0692      	lsls	r2, r2, #26
 8000efc:	d51f      	bpl.n	8000f3e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000efe:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f04:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000f0a:	f000 b959 	b.w	80011c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f0e:	f7ff ff71 	bl	8000df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff70 	bl	8000df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f18:	e783      	b.n	8000e22 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f1a:	f7ff ff6b 	bl	8000df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ff6a 	bl	8000df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f24:	e792      	b.n	8000e4c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f26:	f7ff ff65 	bl	8000df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff ff64 	bl	8000df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f30:	e7a0      	b.n	8000e74 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f32:	f7ff ff5f 	bl	8000df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f36:	4620      	mov	r0, r4
 8000f38:	f7ff ff5e 	bl	8000df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f3c:	e7af      	b.n	8000e9e <HAL_TIM_IRQHandler+0xa2>
 8000f3e:	bd10      	pop	{r4, pc}

08000f40 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000f42:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f44:	4290      	cmp	r0, r2
 8000f46:	d00e      	beq.n	8000f66 <TIM_Base_SetConfig+0x26>
 8000f48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f4c:	d00b      	beq.n	8000f66 <TIM_Base_SetConfig+0x26>
 8000f4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f52:	4290      	cmp	r0, r2
 8000f54:	d007      	beq.n	8000f66 <TIM_Base_SetConfig+0x26>
 8000f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	d003      	beq.n	8000f66 <TIM_Base_SetConfig+0x26>
 8000f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f62:	4290      	cmp	r0, r2
 8000f64:	d115      	bne.n	8000f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f6c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f6e:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <TIM_Base_SetConfig+0x94>)
 8000f70:	4290      	cmp	r0, r2
 8000f72:	d019      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f78:	d016      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f7e:	4290      	cmp	r0, r2
 8000f80:	d012      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f86:	4290      	cmp	r0, r2
 8000f88:	d00e      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d00a      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <TIM_Base_SetConfig+0x98>)
 8000f94:	4290      	cmp	r0, r2
 8000f96:	d007      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d003      	beq.n	8000fa8 <TIM_Base_SetConfig+0x68>
 8000fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d103      	bne.n	8000fb0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fa8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fb0:	694a      	ldr	r2, [r1, #20]
 8000fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000fb8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fba:	688b      	ldr	r3, [r1, #8]
 8000fbc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000fbe:	680b      	ldr	r3, [r1, #0]
 8000fc0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <TIM_Base_SetConfig+0x94>)
 8000fc4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fc6:	bf04      	itt	eq
 8000fc8:	690b      	ldreq	r3, [r1, #16]
 8000fca:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	6143      	str	r3, [r0, #20]
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40014000 	.word	0x40014000

08000fdc <HAL_TIM_Base_Init>:
{
 8000fdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b1a0      	cbz	r0, 800100c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fea:	b91b      	cbnz	r3, 8000ff4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000ff0:	f001 fabc 	bl	800256c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ffa:	6820      	ldr	r0, [r4, #0]
 8000ffc:	1d21      	adds	r1, r4, #4
 8000ffe:	f7ff ff9f 	bl	8000f40 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001002:	2301      	movs	r3, #1
 8001004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
 800100a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
}
 800100e:	bd10      	pop	{r4, pc}

08001010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001010:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001012:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001014:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001016:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800101a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800101e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001020:	6083      	str	r3, [r0, #8]
 8001022:	bd10      	pop	{r4, pc}

08001024 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001024:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001028:	2b01      	cmp	r3, #1
{
 800102a:	b570      	push	{r4, r5, r6, lr}
 800102c:	4604      	mov	r4, r0
 800102e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001032:	d019      	beq.n	8001068 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001034:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001038:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800103a:	2301      	movs	r3, #1
 800103c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001040:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800104a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800104c:	680b      	ldr	r3, [r1, #0]
 800104e:	2b40      	cmp	r3, #64	; 0x40
 8001050:	d065      	beq.n	800111e <HAL_TIM_ConfigClockSource+0xfa>
 8001052:	d815      	bhi.n	8001080 <HAL_TIM_ConfigClockSource+0x5c>
 8001054:	2b10      	cmp	r3, #16
 8001056:	d00c      	beq.n	8001072 <HAL_TIM_ConfigClockSource+0x4e>
 8001058:	d807      	bhi.n	800106a <HAL_TIM_ConfigClockSource+0x46>
 800105a:	b153      	cbz	r3, 8001072 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800105c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800105e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001064:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800106a:	2b20      	cmp	r3, #32
 800106c:	d001      	beq.n	8001072 <HAL_TIM_ConfigClockSource+0x4e>
 800106e:	2b30      	cmp	r3, #48	; 0x30
 8001070:	d1f4      	bne.n	800105c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001072:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001074:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800107c:	4313      	orrs	r3, r2
 800107e:	e01a      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001080:	2b60      	cmp	r3, #96	; 0x60
 8001082:	d034      	beq.n	80010ee <HAL_TIM_ConfigClockSource+0xca>
 8001084:	d819      	bhi.n	80010ba <HAL_TIM_ConfigClockSource+0x96>
 8001086:	2b50      	cmp	r3, #80	; 0x50
 8001088:	d1e8      	bne.n	800105c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800108a:	684a      	ldr	r2, [r1, #4]
 800108c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800108e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001090:	6a05      	ldr	r5, [r0, #32]
 8001092:	f025 0501 	bic.w	r5, r5, #1
 8001096:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001098:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800109a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800109e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010a2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80010ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80010ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80010b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80010b6:	6083      	str	r3, [r0, #8]
 80010b8:	e7d0      	b.n	800105c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80010ba:	2b70      	cmp	r3, #112	; 0x70
 80010bc:	d00c      	beq.n	80010d8 <HAL_TIM_ConfigClockSource+0xb4>
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d1cb      	bne.n	800105c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80010c4:	68cb      	ldr	r3, [r1, #12]
 80010c6:	684a      	ldr	r2, [r1, #4]
 80010c8:	6889      	ldr	r1, [r1, #8]
 80010ca:	f7ff ffa1 	bl	8001010 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	e008      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80010d8:	68cb      	ldr	r3, [r1, #12]
 80010da:	684a      	ldr	r2, [r1, #4]
 80010dc:	6889      	ldr	r1, [r1, #8]
 80010de:	f7ff ff97 	bl	8001010 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80010e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010ea:	6093      	str	r3, [r2, #8]
      break;
 80010ec:	e7b6      	b.n	800105c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010ee:	684d      	ldr	r5, [r1, #4]
 80010f0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010f2:	6a01      	ldr	r1, [r0, #32]
 80010f4:	f021 0110 	bic.w	r1, r1, #16
 80010f8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010fa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80010fc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001106:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800110a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800110e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001110:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001112:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001118:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800111c:	e7cb      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001122:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001124:	6a05      	ldr	r5, [r0, #32]
 8001126:	f025 0501 	bic.w	r5, r5, #1
 800112a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800112c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800112e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001136:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800113a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800113c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800113e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001140:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001146:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800114a:	e7b4      	b.n	80010b6 <HAL_TIM_ConfigClockSource+0x92>

0800114c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800114c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001150:	2b01      	cmp	r3, #1
{
 8001152:	b530      	push	{r4, r5, lr}
 8001154:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001158:	d02d      	beq.n	80011b6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800115a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800115e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001160:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001162:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001164:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001168:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800116a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 800116c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001170:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001172:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001174:	4c11      	ldr	r4, [pc, #68]	; (80011bc <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001176:	42a3      	cmp	r3, r4
 8001178:	d012      	beq.n	80011a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800117a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117e:	d00f      	beq.n	80011a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001180:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001184:	42a3      	cmp	r3, r4
 8001186:	d00b      	beq.n	80011a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001188:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800118c:	42a3      	cmp	r3, r4
 800118e:	d007      	beq.n	80011a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001190:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001194:	42a3      	cmp	r3, r4
 8001196:	d003      	beq.n	80011a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001198:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800119c:	42a3      	cmp	r3, r4
 800119e:	d104      	bne.n	80011aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011a0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80011a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011a6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80011a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011b0:	2300      	movs	r3, #0
 80011b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80011b6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80011b8:	bd30      	pop	{r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_TIMEx_CommutCallback>:
 80011c0:	4770      	bx	lr

080011c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80011c2:	4770      	bx	lr

080011c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011c4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011c6:	6803      	ldr	r3, [r0, #0]
 80011c8:	68c1      	ldr	r1, [r0, #12]
 80011ca:	691a      	ldr	r2, [r3, #16]
{
 80011cc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011d2:	430a      	orrs	r2, r1
 80011d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d6:	6925      	ldr	r5, [r4, #16]
 80011d8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80011da:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011dc:	69c0      	ldr	r0, [r0, #28]
 80011de:	432a      	orrs	r2, r5
 80011e0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80011e2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011e6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80011e8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011ec:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	69a1      	ldr	r1, [r4, #24]
 80011f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011fa:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001204:	d129      	bne.n	800125a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001206:	4293      	cmp	r3, r2
 8001208:	d003      	beq.n	8001212 <UART_SetConfig+0x4e>
 800120a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120e:	4293      	cmp	r3, r2
 8001210:	d120      	bne.n	8001254 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001212:	f7ff fd9f 	bl	8000d54 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	6825      	ldr	r5, [r4, #0]
 800121a:	1892      	adds	r2, r2, r2
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f04f 0119 	mov.w	r1, #25
 8001224:	415b      	adcs	r3, r3
 8001226:	fba0 0101 	umull	r0, r1, r0, r1
 800122a:	f7ff f831 	bl	8000290 <__aeabi_uldivmod>
 800122e:	2164      	movs	r1, #100	; 0x64
 8001230:	fbb0 f4f1 	udiv	r4, r0, r1
 8001234:	fb01 0314 	mls	r3, r1, r4, r0
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	3332      	adds	r3, #50	; 0x32
 800123c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001240:	f003 0207 	and.w	r2, r3, #7
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800124a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800124e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001250:	60ab      	str	r3, [r5, #8]
 8001252:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001254:	f7ff fd6e 	bl	8000d34 <HAL_RCC_GetPCLK1Freq>
 8001258:	e7dd      	b.n	8001216 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800125a:	4293      	cmp	r3, r2
 800125c:	d002      	beq.n	8001264 <UART_SetConfig+0xa0>
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <UART_SetConfig+0xd8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d116      	bne.n	8001292 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001264:	f7ff fd76 	bl	8000d54 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	6825      	ldr	r5, [r4, #0]
 800126c:	2119      	movs	r1, #25
 800126e:	009a      	lsls	r2, r3, #2
 8001270:	fba0 0101 	umull	r0, r1, r0, r1
 8001274:	0f9b      	lsrs	r3, r3, #30
 8001276:	f7ff f80b 	bl	8000290 <__aeabi_uldivmod>
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	fbb0 f1f2 	udiv	r1, r0, r2
 8001280:	fb02 0311 	mls	r3, r2, r1, r0
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	3332      	adds	r3, #50	; 0x32
 8001288:	fbb3 f3f2 	udiv	r3, r3, r2
 800128c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001290:	e7de      	b.n	8001250 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001292:	f7ff fd4f 	bl	8000d34 <HAL_RCC_GetPCLK1Freq>
 8001296:	e7e7      	b.n	8001268 <UART_SetConfig+0xa4>
 8001298:	40011000 	.word	0x40011000
 800129c:	40011400 	.word	0x40011400

080012a0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	4604      	mov	r4, r0
 80012a4:	460e      	mov	r6, r1
 80012a6:	4617      	mov	r7, r2
 80012a8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012aa:	6821      	ldr	r1, [r4, #0]
 80012ac:	680b      	ldr	r3, [r1, #0]
 80012ae:	ea36 0303 	bics.w	r3, r6, r3
 80012b2:	d101      	bne.n	80012b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012b4:	2000      	movs	r0, #0
}
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012b8:	1c6b      	adds	r3, r5, #1
 80012ba:	d0f7      	beq.n	80012ac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012bc:	b995      	cbnz	r5, 80012e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012d0:	2320      	movs	r3, #32
 80012d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012da:	2300      	movs	r3, #0
 80012dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012e0:	2003      	movs	r0, #3
 80012e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012e4:	f7ff f982 	bl	80005ec <HAL_GetTick>
 80012e8:	1bc0      	subs	r0, r0, r7
 80012ea:	4285      	cmp	r5, r0
 80012ec:	d2dd      	bcs.n	80012aa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80012ee:	e7e6      	b.n	80012be <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080012f0 <HAL_UART_Init>:
{
 80012f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80012f2:	4604      	mov	r4, r0
 80012f4:	b340      	cbz	r0, 8001348 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80012f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012fe:	b91b      	cbnz	r3, 8001308 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001300:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001304:	f001 f94a 	bl	800259c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001308:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800130a:	2324      	movs	r3, #36	; 0x24
 800130c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001310:	68d3      	ldr	r3, [r2, #12]
 8001312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001316:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff ff53 	bl	80011c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001326:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800132e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001336:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001338:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800133a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800133c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800133e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001342:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001346:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
}
 800134a:	bd10      	pop	{r4, pc}

0800134c <HAL_UART_Transmit>:
{
 800134c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001350:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001352:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001356:	2b20      	cmp	r3, #32
{
 8001358:	4604      	mov	r4, r0
 800135a:	460d      	mov	r5, r1
 800135c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800135e:	d151      	bne.n	8001404 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001360:	2900      	cmp	r1, #0
 8001362:	d04c      	beq.n	80013fe <HAL_UART_Transmit+0xb2>
 8001364:	2a00      	cmp	r2, #0
 8001366:	d04a      	beq.n	80013fe <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001368:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800136c:	2b01      	cmp	r3, #1
 800136e:	d049      	beq.n	8001404 <HAL_UART_Transmit+0xb8>
 8001370:	2301      	movs	r3, #1
 8001372:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001376:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800137a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001380:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001384:	f7ff f932 	bl	80005ec <HAL_GetTick>
    huart->TxXferSize = Size;
 8001388:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800138c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800138e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001392:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001396:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001398:	b29b      	uxth	r3, r3
 800139a:	b95b      	cbnz	r3, 80013b4 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4632      	mov	r2, r6
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7ff ff7c 	bl	80012a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013a8:	b9a0      	cbnz	r0, 80013d4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80013aa:	2320      	movs	r3, #32
 80013ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80013b4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c2:	4632      	mov	r2, r6
 80013c4:	463b      	mov	r3, r7
 80013c6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ca:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013cc:	d10e      	bne.n	80013ec <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ce:	f7ff ff67 	bl	80012a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013d2:	b110      	cbz	r0, 80013da <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80013d4:	2003      	movs	r0, #3
 80013d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013da:	882b      	ldrh	r3, [r5, #0]
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	b943      	cbnz	r3, 80013fa <HAL_UART_Transmit+0xae>
          pData += 2U;
 80013e8:	3502      	adds	r5, #2
 80013ea:	e7d4      	b.n	8001396 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ec:	f7ff ff58 	bl	80012a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1ef      	bne.n	80013d4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	782a      	ldrb	r2, [r5, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	3501      	adds	r5, #1
 80013fc:	e7cb      	b.n	8001396 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001404:	2002      	movs	r0, #2
}
 8001406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800140a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800140a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800140c:	f000 fca8 	bl	8001d60 <vTaskStartScheduler>
  
  return osOK;
}
 8001410:	2000      	movs	r0, #0
 8001412:	bd08      	pop	{r3, pc}

08001414 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001418:	6946      	ldr	r6, [r0, #20]
 800141a:	692a      	ldr	r2, [r5, #16]
 800141c:	6840      	ldr	r0, [r0, #4]
 800141e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001422:	460b      	mov	r3, r1
 8001424:	b086      	sub	sp, #24
 8001426:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001428:	b176      	cbz	r6, 8001448 <osThreadCreate+0x34>
 800142a:	69ad      	ldr	r5, [r5, #24]
 800142c:	b165      	cbz	r5, 8001448 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800142e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001430:	bf14      	ite	ne
 8001432:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001434:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001436:	9502      	str	r5, [sp, #8]
 8001438:	e88d 0050 	stmia.w	sp, {r4, r6}
 800143c:	f000 fc2c 	bl	8001c98 <xTaskCreateStatic>
 8001440:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001442:	9805      	ldr	r0, [sp, #20]
}
 8001444:	b006      	add	sp, #24
 8001446:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001448:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800144a:	bf14      	ite	ne
 800144c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800144e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001450:	ad05      	add	r5, sp, #20
 8001452:	b292      	uxth	r2, r2
 8001454:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001458:	f000 fc55 	bl	8001d06 <xTaskCreate>
 800145c:	2801      	cmp	r0, #1
 800145e:	d0f0      	beq.n	8001442 <osThreadCreate+0x2e>
      return NULL;
 8001460:	2000      	movs	r0, #0
 8001462:	e7ef      	b.n	8001444 <osThreadCreate+0x30>

08001464 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001464:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001466:	2800      	cmp	r0, #0
 8001468:	bf08      	it	eq
 800146a:	2001      	moveq	r0, #1
 800146c:	f000 fdc0 	bl	8001ff0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001470:	2000      	movs	r0, #0
 8001472:	bd08      	pop	{r3, pc}

08001474 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001474:	f100 0308 	add.w	r3, r0, #8
 8001478:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800147a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800147e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001480:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001482:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001484:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001486:	6003      	str	r3, [r0, #0]
 8001488:	4770      	bx	lr

0800148a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800148a:	2300      	movs	r3, #0
 800148c:	6103      	str	r3, [r0, #16]
 800148e:	4770      	bx	lr

08001490 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001490:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001492:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800149c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800149e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014a0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014a2:	3301      	adds	r3, #1
 80014a4:	6003      	str	r3, [r0, #0]
 80014a6:	4770      	bx	lr

080014a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014a8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80014aa:	1c53      	adds	r3, r2, #1
{
 80014ac:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80014ae:	d10a      	bne.n	80014c6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014b0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014b6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014b8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80014ba:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014c0:	3301      	adds	r3, #1
 80014c2:	6003      	str	r3, [r0, #0]
 80014c4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014c6:	f100 0308 	add.w	r3, r0, #8
 80014ca:	685c      	ldr	r4, [r3, #4]
 80014cc:	6825      	ldr	r5, [r4, #0]
 80014ce:	42aa      	cmp	r2, r5
 80014d0:	d3ef      	bcc.n	80014b2 <vListInsert+0xa>
 80014d2:	4623      	mov	r3, r4
 80014d4:	e7f9      	b.n	80014ca <vListInsert+0x22>

080014d6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014d6:	6841      	ldr	r1, [r0, #4]
 80014d8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014da:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014dc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014de:	6882      	ldr	r2, [r0, #8]
 80014e0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014e6:	bf08      	it	eq
 80014e8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014ea:	2200      	movs	r2, #0
 80014ec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	3a01      	subs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014f4:	6818      	ldr	r0, [r3, #0]
}
 80014f6:	4770      	bx	lr

080014f8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80014f8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <prvTaskExitError+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	d008      	beq.n	8001518 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	e7fe      	b.n	8001516 <prvTaskExitError+0x1e>
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001528:	9b01      	ldr	r3, [sp, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0fc      	beq.n	8001528 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800152e:	b002      	add	sp, #8
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <prvPortStartFirstTask+0x24>)
 800153a:	6800      	ldr	r0, [r0, #0]
 800153c:	6800      	ldr	r0, [r0, #0]
 800153e:	f380 8808 	msr	MSP, r0
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f380 8814 	msr	CONTROL, r0
 800154a:	b662      	cpsie	i
 800154c:	b661      	cpsie	f
 800154e:	f3bf 8f4f 	dsb	sy
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	df00      	svc	0
 8001558:	bf00      	nop
 800155a:	0000      	.short	0x0000
 800155c:	e000ed08 	.word	0xe000ed08

08001560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001570 <vPortEnableVFP+0x10>
 8001564:	6801      	ldr	r1, [r0, #0]
 8001566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800156a:	6001      	str	r1, [r0, #0]
 800156c:	4770      	bx	lr
 800156e:	0000      	.short	0x0000
 8001570:	e000ed88 	.word	0xe000ed88

08001574 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001578:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <pxPortInitialiseStack+0x28>)
 800157e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001582:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001586:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800158a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800158e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001592:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001596:	3844      	subs	r0, #68	; 0x44
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	080014f9 	.word	0x080014f9

080015a0 <SVC_Handler>:
	__asm volatile (
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <pxCurrentTCBConst2>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	6808      	ldr	r0, [r1, #0]
 80015a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015aa:	f380 8809 	msr	PSP, r0
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f380 8811 	msr	BASEPRI, r0
 80015ba:	4770      	bx	lr
 80015bc:	f3af 8000 	nop.w

080015c0 <pxCurrentTCBConst2>:
 80015c0:	20003cb0 	.word	0x20003cb0

080015c4 <vPortEnterCritical>:
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <vPortEnterCritical+0x3c>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80015da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80015dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80015de:	d10d      	bne.n	80015fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <vPortEnterCritical+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80015e8:	d008      	beq.n	80015fc <vPortEnterCritical+0x38>
 80015ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ee:	f383 8811 	msr	BASEPRI, r3
 80015f2:	f3bf 8f6f 	isb	sy
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	e7fe      	b.n	80015fa <vPortEnterCritical+0x36>
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	e000ed04 	.word	0xe000ed04

08001608 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <vPortExitCritical+0x24>)
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	b943      	cbnz	r3, 8001620 <vPortExitCritical+0x18>
 800160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	e7fe      	b.n	800161e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001620:	3b01      	subs	r3, #1
 8001622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001624:	b90b      	cbnz	r3, 800162a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	4770      	bx	lr
 800162c:	20000008 	.word	0x20000008

08001630 <PendSV_Handler>:
	__asm volatile
 8001630:	f3ef 8009 	mrs	r0, PSP
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <pxCurrentTCBConst>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f01e 0f10 	tst.w	lr, #16
 8001640:	bf08      	it	eq
 8001642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800164a:	6010      	str	r0, [r2, #0]
 800164c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001654:	f380 8811 	msr	BASEPRI, r0
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	f000 fcea 	bl	8002038 <vTaskSwitchContext>
 8001664:	f04f 0000 	mov.w	r0, #0
 8001668:	f380 8811 	msr	BASEPRI, r0
 800166c:	bc09      	pop	{r0, r3}
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	6808      	ldr	r0, [r1, #0]
 8001672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001676:	f01e 0f10 	tst.w	lr, #16
 800167a:	bf08      	it	eq
 800167c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001680:	f380 8809 	msr	PSP, r0
 8001684:	f3bf 8f6f 	isb	sy
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w

08001690 <pxCurrentTCBConst>:
 8001690:	20003cb0 	.word	0x20003cb0

08001694 <SysTick_Handler>:
{
 8001694:	b508      	push	{r3, lr}
	__asm volatile
 8001696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80016a6:	f000 fb99 	bl	8001ddc <xTaskIncrementTick>
 80016aa:	b118      	cbz	r0, 80016b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SysTick_Handler+0x28>)
 80016ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80016b4:	2300      	movs	r3, #0
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	bd08      	pop	{r3, pc}
 80016bc:	e000ed04 	.word	0xe000ed04

080016c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80016c0:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80016c2:	4909      	ldr	r1, [pc, #36]	; (80016e8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80016c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <vPortSetupTimerInterrupt+0x2c>)
 80016cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	4906      	ldr	r1, [pc, #24]	; (80016f0 <vPortSetupTimerInterrupt+0x30>)
 80016d8:	3b01      	subs	r3, #1
 80016da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80016dc:	2307      	movs	r3, #7
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010
 80016e8:	e000e018 	.word	0xe000e018
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	e000e014 	.word	0xe000e014

080016f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <xPortStartScheduler+0xe8>)
 80016f6:	4a3a      	ldr	r2, [pc, #232]	; (80017e0 <xPortStartScheduler+0xec>)
{
 80016f8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	4291      	cmp	r1, r2
 80016fe:	d108      	bne.n	8001712 <xPortStartScheduler+0x1e>
	__asm volatile
 8001700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	f3bf 8f6f 	isb	sy
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	e7fe      	b.n	8001710 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <xPortStartScheduler+0xf0>)
 8001716:	429a      	cmp	r2, r3
 8001718:	d108      	bne.n	800172c <xPortStartScheduler+0x38>
 800171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171e:	f383 8811 	msr	BASEPRI, r3
 8001722:	f3bf 8f6f 	isb	sy
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	e7fe      	b.n	800172a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <xPortStartScheduler+0xf4>)
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001734:	22ff      	movs	r2, #255	; 0xff
 8001736:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001738:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800173a:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001742:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800174a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <xPortStartScheduler+0xfc>)
 800174e:	2207      	movs	r2, #7
 8001750:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001752:	2100      	movs	r1, #0
 8001754:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001758:	0600      	lsls	r0, r0, #24
 800175a:	f102 34ff 	add.w	r4, r2, #4294967295
 800175e:	d40d      	bmi.n	800177c <xPortStartScheduler+0x88>
 8001760:	b101      	cbz	r1, 8001764 <xPortStartScheduler+0x70>
 8001762:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2a03      	cmp	r2, #3
 8001768:	d011      	beq.n	800178e <xPortStartScheduler+0x9a>
 800176a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176e:	f383 8811 	msr	BASEPRI, r3
 8001772:	f3bf 8f6f 	isb	sy
 8001776:	f3bf 8f4f 	dsb	sy
 800177a:	e7fe      	b.n	800177a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800177c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001780:	0052      	lsls	r2, r2, #1
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f88d 2003 	strb.w	r2, [sp, #3]
 8001788:	2101      	movs	r1, #1
 800178a:	4622      	mov	r2, r4
 800178c:	e7e2      	b.n	8001754 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800178e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001790:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001794:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <xPortStartScheduler+0xf4>)
 800179a:	b2db      	uxtb	r3, r3
 800179c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <xPortStartScheduler+0x100>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80017a6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80017ae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80017b0:	f7ff ff86 	bl	80016c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <xPortStartScheduler+0x104>)
 80017b6:	2400      	movs	r4, #0
 80017b8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80017ba:	f7ff fed1 	bl	8001560 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <xPortStartScheduler+0x108>)
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017c6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80017c8:	f7ff feb6 	bl	8001538 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80017cc:	f000 fc34 	bl	8002038 <vTaskSwitchContext>
	prvTaskExitError();
 80017d0:	f7ff fe92 	bl	80014f8 <prvTaskExitError>
}
 80017d4:	4620      	mov	r0, r4
 80017d6:	b002      	add	sp, #8
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	410fc271 	.word	0x410fc271
 80017e4:	410fc270 	.word	0x410fc270
 80017e8:	e000e400 	.word	0xe000e400
 80017ec:	20000090 	.word	0x20000090
 80017f0:	20000094 	.word	0x20000094
 80017f4:	e000ed20 	.word	0xe000ed20
 80017f8:	20000008 	.word	0x20000008
 80017fc:	e000ef34 	.word	0xe000ef34

08001800 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001800:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <prvInsertBlockIntoFreeList+0x40>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4282      	cmp	r2, r0
 8001808:	d318      	bcc.n	800183c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800180a:	685c      	ldr	r4, [r3, #4]
 800180c:	1919      	adds	r1, r3, r4
 800180e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001810:	bf01      	itttt	eq
 8001812:	6841      	ldreq	r1, [r0, #4]
 8001814:	4618      	moveq	r0, r3
 8001816:	1909      	addeq	r1, r1, r4
 8001818:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800181a:	6844      	ldr	r4, [r0, #4]
 800181c:	1901      	adds	r1, r0, r4
 800181e:	428a      	cmp	r2, r1
 8001820:	d107      	bne.n	8001832 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <prvInsertBlockIntoFreeList+0x44>)
 8001824:	6809      	ldr	r1, [r1, #0]
 8001826:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001828:	bf1f      	itttt	ne
 800182a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800182c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800182e:	1909      	addne	r1, r1, r4
 8001830:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001832:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001834:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001836:	bf18      	it	ne
 8001838:	6018      	strne	r0, [r3, #0]
 800183a:	bd10      	pop	{r4, pc}
 800183c:	4613      	mov	r3, r2
 800183e:	e7e1      	b.n	8001804 <prvInsertBlockIntoFreeList+0x4>
 8001840:	20003ca8 	.word	0x20003ca8
 8001844:	20000098 	.word	0x20000098

08001848 <pvPortMalloc>:
{
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800184e:	f000 fabd 	bl	8001dcc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001852:	493e      	ldr	r1, [pc, #248]	; (800194c <pvPortMalloc+0x104>)
 8001854:	4d3e      	ldr	r5, [pc, #248]	; (8001950 <pvPortMalloc+0x108>)
 8001856:	680b      	ldr	r3, [r1, #0]
 8001858:	bb0b      	cbnz	r3, 800189e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800185a:	4a3e      	ldr	r2, [pc, #248]	; (8001954 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800185c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800185e:	bf1f      	itttt	ne
 8001860:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001862:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001866:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800186a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800186c:	bf14      	ite	ne
 800186e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001870:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001874:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001876:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001878:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800187c:	4e36      	ldr	r6, [pc, #216]	; (8001958 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800187e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001880:	2000      	movs	r0, #0
 8001882:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001884:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001886:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001888:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800188a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800188c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001890:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001892:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <pvPortMalloc+0x118>)
 8001896:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800189c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800189e:	682f      	ldr	r7, [r5, #0]
 80018a0:	4227      	tst	r7, r4
 80018a2:	d116      	bne.n	80018d2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	d041      	beq.n	800192c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80018a8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018ac:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018ae:	bf1c      	itt	ne
 80018b0:	f023 0307 	bicne.w	r3, r3, #7
 80018b4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018b6:	b163      	cbz	r3, 80018d2 <pvPortMalloc+0x8a>
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <pvPortMalloc+0x118>)
 80018ba:	6816      	ldr	r6, [r2, #0]
 80018bc:	42b3      	cmp	r3, r6
 80018be:	4690      	mov	r8, r2
 80018c0:	d807      	bhi.n	80018d2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80018c2:	4a25      	ldr	r2, [pc, #148]	; (8001958 <pvPortMalloc+0x110>)
 80018c4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018c6:	6868      	ldr	r0, [r5, #4]
 80018c8:	4283      	cmp	r3, r0
 80018ca:	d804      	bhi.n	80018d6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80018cc:	6809      	ldr	r1, [r1, #0]
 80018ce:	428d      	cmp	r5, r1
 80018d0:	d107      	bne.n	80018e2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80018d2:	2400      	movs	r4, #0
 80018d4:	e02a      	b.n	800192c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018d6:	682c      	ldr	r4, [r5, #0]
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d0f7      	beq.n	80018cc <pvPortMalloc+0x84>
 80018dc:	462a      	mov	r2, r5
 80018de:	4625      	mov	r5, r4
 80018e0:	e7f1      	b.n	80018c6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018e2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018e4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018e6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018e8:	1ac2      	subs	r2, r0, r3
 80018ea:	2a10      	cmp	r2, #16
 80018ec:	d90f      	bls.n	800190e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018ee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018f0:	0741      	lsls	r1, r0, #29
 80018f2:	d008      	beq.n	8001906 <pvPortMalloc+0xbe>
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	e7fe      	b.n	8001904 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001906:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001908:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800190a:	f7ff ff79 	bl	8001800 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800190e:	4913      	ldr	r1, [pc, #76]	; (800195c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001910:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001912:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001914:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001916:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001918:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800191a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800191e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001922:	bf38      	it	cc
 8001924:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001926:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001928:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800192a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800192c:	f000 fae8 	bl	8001f00 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001930:	0763      	lsls	r3, r4, #29
 8001932:	d008      	beq.n	8001946 <pvPortMalloc+0xfe>
 8001934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001938:	f383 8811 	msr	BASEPRI, r3
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	e7fe      	b.n	8001944 <pvPortMalloc+0xfc>
}
 8001946:	4620      	mov	r0, r4
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800194c:	20000098 	.word	0x20000098
 8001950:	20003c9c 	.word	0x20003c9c
 8001954:	2000009c 	.word	0x2000009c
 8001958:	20003ca8 	.word	0x20003ca8
 800195c:	20003ca4 	.word	0x20003ca4
 8001960:	20003ca0 	.word	0x20003ca0

08001964 <vPortFree>:
{
 8001964:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001966:	4604      	mov	r4, r0
 8001968:	b370      	cbz	r0, 80019c8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <vPortFree+0x68>)
 800196c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4213      	tst	r3, r2
 8001974:	d108      	bne.n	8001988 <vPortFree+0x24>
 8001976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197a:	f383 8811 	msr	BASEPRI, r3
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f3bf 8f4f 	dsb	sy
 8001986:	e7fe      	b.n	8001986 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001988:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800198c:	b141      	cbz	r1, 80019a0 <vPortFree+0x3c>
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	e7fe      	b.n	800199e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019a0:	ea23 0302 	bic.w	r3, r3, r2
 80019a4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80019a8:	f000 fa10 	bl	8001dcc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <vPortFree+0x6c>)
 80019ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80019b2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019b4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019b8:	440b      	add	r3, r1
 80019ba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019bc:	f7ff ff20 	bl	8001800 <prvInsertBlockIntoFreeList>
}
 80019c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80019c4:	f000 ba9c 	b.w	8001f00 <xTaskResumeAll>
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	bf00      	nop
 80019cc:	20003c9c 	.word	0x20003c9c
 80019d0:	20003ca0 	.word	0x20003ca0

080019d4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80019d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80019da:	f7ff fdf3 	bl	80015c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80019e0:	4c2d      	ldr	r4, [pc, #180]	; (8001a98 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4f2d      	ldr	r7, [pc, #180]	; (8001a9c <prvAddNewTaskToReadyList+0xc8>)
 80019e6:	3201      	adds	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80019ea:	6825      	ldr	r5, [r4, #0]
 80019ec:	2d00      	cmp	r5, #0
 80019ee:	d145      	bne.n	8001a7c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80019f0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d11c      	bne.n	8001a32 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019f8:	1978      	adds	r0, r7, r5
 80019fa:	3514      	adds	r5, #20
 80019fc:	f7ff fd3a 	bl	8001474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a00:	2d8c      	cmp	r5, #140	; 0x8c
 8001a02:	d1f9      	bne.n	80019f8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001a04:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001ac8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001a08:	4d25      	ldr	r5, [pc, #148]	; (8001aa0 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	f7ff fd32 	bl	8001474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a10:	4628      	mov	r0, r5
 8001a12:	f7ff fd2f 	bl	8001474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a16:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <prvAddNewTaskToReadyList+0xd0>)
 8001a18:	f7ff fd2c 	bl	8001474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001a1c:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <prvAddNewTaskToReadyList+0xd4>)
 8001a1e:	f7ff fd29 	bl	8001474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a22:	4822      	ldr	r0, [pc, #136]	; (8001aac <prvAddNewTaskToReadyList+0xd8>)
 8001a24:	f7ff fd26 	bl	8001474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <prvAddNewTaskToReadyList+0xdc>)
 8001a2a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <prvAddNewTaskToReadyList+0xe0>)
 8001a30:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001a34:	4921      	ldr	r1, [pc, #132]	; (8001abc <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001a36:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a38:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a3e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a40:	2301      	movs	r3, #1
 8001a42:	4093      	lsls	r3, r2
 8001a44:	4303      	orrs	r3, r0
 8001a46:	2014      	movs	r0, #20
 8001a48:	600b      	str	r3, [r1, #0]
 8001a4a:	fb00 7002 	mla	r0, r0, r2, r7
 8001a4e:	1d31      	adds	r1, r6, #4
 8001a50:	f7ff fd1e 	bl	8001490 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a54:	f7ff fdd8 	bl	8001608 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <prvAddNewTaskToReadyList+0xec>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b163      	cbz	r3, 8001a78 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <prvAddNewTaskToReadyList+0xf0>)
 8001a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <prvAddNewTaskToReadyList+0xec>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1d6      	bne.n	8001a32 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001a8a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001a8c:	bf98      	it	ls
 8001a8e:	6026      	strls	r6, [r4, #0]
 8001a90:	e7cf      	b.n	8001a32 <prvAddNewTaskToReadyList+0x5e>
 8001a92:	bf00      	nop
 8001a94:	20003d48 	.word	0x20003d48
 8001a98:	20003cb0 	.word	0x20003cb0
 8001a9c:	20003cbc 	.word	0x20003cbc
 8001aa0:	20003d74 	.word	0x20003d74
 8001aa4:	20003d90 	.word	0x20003d90
 8001aa8:	20003dbc 	.word	0x20003dbc
 8001aac:	20003da8 	.word	0x20003da8
 8001ab0:	20003cb4 	.word	0x20003cb4
 8001ab4:	20003cb8 	.word	0x20003cb8
 8001ab8:	20003d58 	.word	0x20003d58
 8001abc:	20003d5c 	.word	0x20003d5c
 8001ac0:	20003da4 	.word	0x20003da4
 8001ac4:	e000ed04 	.word	0xe000ed04
 8001ac8:	20003d60 	.word	0x20003d60

08001acc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <prvResetNextTaskUnblockTime+0x1c>)
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <prvResetNextTaskUnblockTime+0x20>)
 8001ad4:	b919      	cbnz	r1, 8001ade <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ad6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ae2:	68d2      	ldr	r2, [r2, #12]
 8001ae4:	6852      	ldr	r2, [r2, #4]
 8001ae6:	e7f8      	b.n	8001ada <prvResetNextTaskUnblockTime+0xe>
 8001ae8:	20003cb4 	.word	0x20003cb4
 8001aec:	20003d88 	.word	0x20003d88

08001af0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001af6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001afa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001afc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001b00:	3a01      	subs	r2, #1
 8001b02:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001b06:	469a      	mov	sl, r3
 8001b08:	4681      	mov	r9, r0
 8001b0a:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b0c:	f026 0607 	bic.w	r6, r6, #7
 8001b10:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001b14:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b16:	7858      	ldrb	r0, [r3, #1]
 8001b18:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001b1c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001b20:	b108      	cbz	r0, 8001b26 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b22:	428b      	cmp	r3, r1
 8001b24:	d1f7      	bne.n	8001b16 <prvInitialiseNewTask.isra.2+0x26>
 8001b26:	9d08      	ldr	r5, [sp, #32]
 8001b28:	2d06      	cmp	r5, #6
 8001b2a:	bf28      	it	cs
 8001b2c:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b2e:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001b30:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001b32:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b34:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b36:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001b3a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b3c:	f7ff fca5 	bl	800148a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b40:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b44:	f104 0018 	add.w	r0, r4, #24
 8001b48:	f7ff fc9f 	bl	800148a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001b4c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b4e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b50:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b52:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b54:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b58:	4652      	mov	r2, sl
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f7ff fd09 	bl	8001574 <pxPortInitialiseStack>
 8001b62:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001b64:	f1b8 0f00 	cmp.w	r8, #0
 8001b68:	d001      	beq.n	8001b6e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b6a:	f8c8 4000 	str.w	r4, [r8]
 8001b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001b72 <prvDeleteTCB>:
	{
 8001b72:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001b78:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b7a:	b93b      	cbnz	r3, 8001b8c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001b7c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001b7e:	f7ff fef1 	bl	8001964 <vPortFree>
				vPortFree( pxTCB );
 8001b82:	4620      	mov	r0, r4
	}
 8001b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001b88:	f7ff beec 	b.w	8001964 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d0f9      	beq.n	8001b84 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d008      	beq.n	8001ba6 <prvDeleteTCB+0x34>
 8001b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b98:	f383 8811 	msr	BASEPRI, r3
 8001b9c:	f3bf 8f6f 	isb	sy
 8001ba0:	f3bf 8f4f 	dsb	sy
 8001ba4:	e7fe      	b.n	8001ba4 <prvDeleteTCB+0x32>
 8001ba6:	bd10      	pop	{r4, pc}

08001ba8 <prvIdleTask>:
{
 8001ba8:	b580      	push	{r7, lr}
				taskYIELD();
 8001baa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001c08 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001bae:	4f12      	ldr	r7, [pc, #72]	; (8001bf8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bb0:	4c12      	ldr	r4, [pc, #72]	; (8001bfc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001bb2:	4d13      	ldr	r5, [pc, #76]	; (8001c00 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	b963      	cbnz	r3, 8001bd2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <prvIdleTask+0x5c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d9f8      	bls.n	8001bb2 <prvIdleTask+0xa>
				taskYIELD();
 8001bc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bc4:	f8c8 3000 	str.w	r3, [r8]
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	e7ee      	b.n	8001bb0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001bd2:	f7ff fcf7 	bl	80015c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bda:	1d30      	adds	r0, r6, #4
 8001bdc:	f7ff fc7b 	bl	80014d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001bec:	f7ff fd0c 	bl	8001608 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001bf0:	4630      	mov	r0, r6
 8001bf2:	f7ff ffbe 	bl	8001b72 <prvDeleteTCB>
 8001bf6:	e7dd      	b.n	8001bb4 <prvIdleTask+0xc>
 8001bf8:	20003dbc 	.word	0x20003dbc
 8001bfc:	20003d4c 	.word	0x20003d4c
 8001c00:	20003d48 	.word	0x20003d48
 8001c04:	20003cbc 	.word	0x20003cbc
 8001c08:	e000ed04 	.word	0xe000ed04

08001c0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c10:	4e1b      	ldr	r6, [pc, #108]	; (8001c80 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001c12:	681d      	ldr	r5, [r3, #0]
{
 8001c14:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c16:	6830      	ldr	r0, [r6, #0]
 8001c18:	3004      	adds	r0, #4
{
 8001c1a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c1c:	f7ff fc5b 	bl	80014d6 <uxListRemove>
 8001c20:	4633      	mov	r3, r6
 8001c22:	b940      	cbnz	r0, 8001c36 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001c24:	6831      	ldr	r1, [r6, #0]
 8001c26:	4e17      	ldr	r6, [pc, #92]	; (8001c84 <prvAddCurrentTaskToDelayedList+0x78>)
 8001c28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001c2a:	6832      	ldr	r2, [r6, #0]
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4088      	lsls	r0, r1
 8001c30:	ea22 0200 	bic.w	r2, r2, r0
 8001c34:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c36:	1c62      	adds	r2, r4, #1
 8001c38:	d107      	bne.n	8001c4a <prvAddCurrentTaskToDelayedList+0x3e>
 8001c3a:	b137      	cbz	r7, 8001c4a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	4812      	ldr	r0, [pc, #72]	; (8001c88 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001c40:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c46:	f7ff bc23 	b.w	8001490 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c4a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c4c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001c4e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c50:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001c52:	d907      	bls.n	8001c64 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8001c56:	6810      	ldr	r0, [r2, #0]
 8001c58:	6819      	ldr	r1, [r3, #0]
}
 8001c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c5e:	3104      	adds	r1, #4
 8001c60:	f7ff bc22 	b.w	80014a8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <prvAddCurrentTaskToDelayedList+0x84>)
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	3104      	adds	r1, #4
 8001c6c:	f7ff fc1c 	bl	80014a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <prvAddCurrentTaskToDelayedList+0x88>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001c76:	bf38      	it	cc
 8001c78:	601c      	strcc	r4, [r3, #0]
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	20003dd0 	.word	0x20003dd0
 8001c80:	20003cb0 	.word	0x20003cb0
 8001c84:	20003d5c 	.word	0x20003d5c
 8001c88:	20003da8 	.word	0x20003da8
 8001c8c:	20003cb8 	.word	0x20003cb8
 8001c90:	20003cb4 	.word	0x20003cb4
 8001c94:	20003d88 	.word	0x20003d88

08001c98 <xTaskCreateStatic>:
	{
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001c9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001ca0:	b945      	cbnz	r5, 8001cb4 <xTaskCreateStatic+0x1c>
 8001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca6:	f383 8811 	msr	BASEPRI, r3
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	e7fe      	b.n	8001cb2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001cb4:	b944      	cbnz	r4, 8001cc8 <xTaskCreateStatic+0x30>
 8001cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cba:	f383 8811 	msr	BASEPRI, r3
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	f3bf 8f4f 	dsb	sy
 8001cc6:	e7fe      	b.n	8001cc6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001cc8:	2654      	movs	r6, #84	; 0x54
 8001cca:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001ccc:	9e04      	ldr	r6, [sp, #16]
 8001cce:	2e54      	cmp	r6, #84	; 0x54
 8001cd0:	d008      	beq.n	8001ce4 <xTaskCreateStatic+0x4c>
 8001cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	e7fe      	b.n	8001ce2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ce4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ce6:	2502      	movs	r5, #2
 8001ce8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cec:	ad05      	add	r5, sp, #20
 8001cee:	9501      	str	r5, [sp, #4]
 8001cf0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001cf2:	9402      	str	r4, [sp, #8]
 8001cf4:	9500      	str	r5, [sp, #0]
 8001cf6:	f7ff fefb 	bl	8001af0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fe6a 	bl	80019d4 <prvAddNewTaskToReadyList>
	}
 8001d00:	9805      	ldr	r0, [sp, #20]
 8001d02:	b006      	add	sp, #24
 8001d04:	bd70      	pop	{r4, r5, r6, pc}

08001d06 <xTaskCreate>:
	{
 8001d06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d0a:	4607      	mov	r7, r0
 8001d0c:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d0e:	0090      	lsls	r0, r2, #2
	{
 8001d10:	4688      	mov	r8, r1
 8001d12:	4616      	mov	r6, r2
 8001d14:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d16:	f7ff fd97 	bl	8001848 <pvPortMalloc>
			if( pxStack != NULL )
 8001d1a:	4605      	mov	r5, r0
 8001d1c:	b1e8      	cbz	r0, 8001d5a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d1e:	2054      	movs	r0, #84	; 0x54
 8001d20:	f7ff fd92 	bl	8001848 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001d24:	4604      	mov	r4, r0
 8001d26:	b1a8      	cbz	r0, 8001d54 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8001d30:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d36:	9002      	str	r0, [sp, #8]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4632      	mov	r2, r6
 8001d3c:	464b      	mov	r3, r9
 8001d3e:	4641      	mov	r1, r8
 8001d40:	4638      	mov	r0, r7
 8001d42:	f7ff fed5 	bl	8001af0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff fe44 	bl	80019d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d4c:	2001      	movs	r0, #1
	}
 8001d4e:	b005      	add	sp, #20
 8001d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8001d54:	4628      	mov	r0, r5
 8001d56:	f7ff fe05 	bl	8001964 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001d5e:	e7f6      	b.n	8001d4e <xTaskCreate+0x48>

08001d60 <vTaskStartScheduler>:
{
 8001d60:	b510      	push	{r4, lr}
 8001d62:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d64:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d66:	aa07      	add	r2, sp, #28
 8001d68:	a906      	add	r1, sp, #24
 8001d6a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d6c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d6e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d70:	f000 f99c 	bl	80020ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d74:	9b05      	ldr	r3, [sp, #20]
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	9b06      	ldr	r3, [sp, #24]
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9400      	str	r4, [sp, #0]
 8001d7e:	4623      	mov	r3, r4
 8001d80:	9a07      	ldr	r2, [sp, #28]
 8001d82:	490d      	ldr	r1, [pc, #52]	; (8001db8 <vTaskStartScheduler+0x58>)
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <vTaskStartScheduler+0x5c>)
 8001d86:	f7ff ff87 	bl	8001c98 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8001d8a:	b190      	cbz	r0, 8001db2 <vTaskStartScheduler+0x52>
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <vTaskStartScheduler+0x60>)
 8001d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001da2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <vTaskStartScheduler+0x64>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <vTaskStartScheduler+0x68>)
 8001dac:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001dae:	f7ff fca1 	bl	80016f4 <xPortStartScheduler>
}
 8001db2:	b008      	add	sp, #32
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	bf00      	nop
 8001db8:	0800303c 	.word	0x0800303c
 8001dbc:	08001ba9 	.word	0x08001ba9
 8001dc0:	20003d88 	.word	0x20003d88
 8001dc4:	20003da4 	.word	0x20003da4
 8001dc8:	20003dd0 	.word	0x20003dd0

08001dcc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001dcc:	4a02      	ldr	r2, [pc, #8]	; (8001dd8 <vTaskSuspendAll+0xc>)
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20003d54 	.word	0x20003d54

08001ddc <xTaskIncrementTick>:
{
 8001ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001de0:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <xTaskIncrementTick+0xf8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d153      	bne.n	8001e90 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <xTaskIncrementTick+0xfc>)
 8001dea:	681c      	ldr	r4, [r3, #0]
 8001dec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001dee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001df0:	b9bc      	cbnz	r4, 8001e22 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <xTaskIncrementTick+0x100>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	b142      	cbz	r2, 8001e0c <xTaskIncrementTick+0x30>
 8001dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	e7fe      	b.n	8001e0a <xTaskIncrementTick+0x2e>
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <xTaskIncrementTick+0x104>)
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	6810      	ldr	r0, [r2, #0]
 8001e12:	6018      	str	r0, [r3, #0]
 8001e14:	6011      	str	r1, [r2, #0]
 8001e16:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <xTaskIncrementTick+0x108>)
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	f7ff fe55 	bl	8001acc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e22:	4d31      	ldr	r5, [pc, #196]	; (8001ee8 <xTaskIncrementTick+0x10c>)
 8001e24:	4f31      	ldr	r7, [pc, #196]	; (8001eec <xTaskIncrementTick+0x110>)
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	f04f 0b00 	mov.w	fp, #0
 8001e2e:	d33e      	bcc.n	8001eae <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e30:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001edc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001e34:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001efc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e38:	f8d8 2000 	ldr.w	r2, [r8]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	bb72      	cbnz	r2, 8001e9e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	602a      	str	r2, [r5, #0]
					break;
 8001e46:	e032      	b.n	8001eae <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e48:	f106 0a04 	add.w	sl, r6, #4
 8001e4c:	4650      	mov	r0, sl
 8001e4e:	f7ff fb42 	bl	80014d6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e52:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001e54:	b119      	cbz	r1, 8001e5e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e56:	f106 0018 	add.w	r0, r6, #24
 8001e5a:	f7ff fb3c 	bl	80014d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e5e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001e60:	f8d9 3000 	ldr.w	r3, [r9]
 8001e64:	2201      	movs	r2, #1
 8001e66:	fa02 f100 	lsl.w	r1, r2, r0
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <xTaskIncrementTick+0x114>)
 8001e6e:	f8c9 1000 	str.w	r1, [r9]
 8001e72:	f04f 0e14 	mov.w	lr, #20
 8001e76:	4651      	mov	r1, sl
 8001e78:	fb0e 3000 	mla	r0, lr, r0, r3
 8001e7c:	f7ff fb08 	bl	8001490 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001e84:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001e86:	4291      	cmp	r1, r2
 8001e88:	bf28      	it	cs
 8001e8a:	f04f 0b01 	movcs.w	fp, #1
 8001e8e:	e7d3      	b.n	8001e38 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <xTaskIncrementTick+0x118>)
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001e98:	f04f 0b00 	mov.w	fp, #0
 8001e9c:	e011      	b.n	8001ec2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8001ea2:	68d2      	ldr	r2, [r2, #12]
 8001ea4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ea6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001ea8:	428c      	cmp	r4, r1
 8001eaa:	d2cd      	bcs.n	8001e48 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001eac:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <xTaskIncrementTick+0x114>)
 8001eb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eb4:	2214      	movs	r2, #20
 8001eb6:	434a      	muls	r2, r1
 8001eb8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001eba:	2a02      	cmp	r2, #2
 8001ebc:	bf28      	it	cs
 8001ebe:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <xTaskIncrementTick+0x11c>)
 8001ec4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	bf18      	it	ne
 8001eca:	f04f 0b01 	movne.w	fp, #1
}
 8001ece:	4658      	mov	r0, fp
 8001ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ed4:	20003d54 	.word	0x20003d54
 8001ed8:	20003dd0 	.word	0x20003dd0
 8001edc:	20003cb4 	.word	0x20003cb4
 8001ee0:	20003cb8 	.word	0x20003cb8
 8001ee4:	20003d8c 	.word	0x20003d8c
 8001ee8:	20003d88 	.word	0x20003d88
 8001eec:	20003cb0 	.word	0x20003cb0
 8001ef0:	20003cbc 	.word	0x20003cbc
 8001ef4:	20003d50 	.word	0x20003d50
 8001ef8:	20003dd4 	.word	0x20003dd4
 8001efc:	20003d5c 	.word	0x20003d5c

08001f00 <xTaskResumeAll>:
{
 8001f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001f04:	4c31      	ldr	r4, [pc, #196]	; (8001fcc <xTaskResumeAll+0xcc>)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	b943      	cbnz	r3, 8001f1c <xTaskResumeAll+0x1c>
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	e7fe      	b.n	8001f1a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001f1c:	f7ff fb52 	bl	80015c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f26:	6824      	ldr	r4, [r4, #0]
 8001f28:	b12c      	cbz	r4, 8001f36 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f2c:	f7ff fb6c 	bl	8001608 <vPortExitCritical>
}
 8001f30:	4620      	mov	r0, r4
 8001f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <xTaskResumeAll+0xd0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f5      	beq.n	8001f2a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f3e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001fe8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001f42:	4f24      	ldr	r7, [pc, #144]	; (8001fd4 <xTaskResumeAll+0xd4>)
 8001f44:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001fec <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f48:	f8d9 3000 	ldr.w	r3, [r9]
 8001f4c:	b9e3      	cbnz	r3, 8001f88 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001f4e:	b10c      	cbz	r4, 8001f54 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001f50:	f7ff fdbc 	bl	8001acc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f54:	4d20      	ldr	r5, [pc, #128]	; (8001fd8 <xTaskResumeAll+0xd8>)
 8001f56:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f58:	b144      	cbz	r4, 8001f6c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001f5a:	4e20      	ldr	r6, [pc, #128]	; (8001fdc <xTaskResumeAll+0xdc>)
 8001f5c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001f5e:	f7ff ff3d 	bl	8001ddc <xTaskIncrementTick>
 8001f62:	b100      	cbz	r0, 8001f66 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001f64:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f66:	3c01      	subs	r4, #1
 8001f68:	d1f9      	bne.n	8001f5e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001f6a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <xTaskResumeAll+0xdc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0da      	beq.n	8001f2a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <xTaskResumeAll+0xe0>)
 8001f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001f84:	2401      	movs	r4, #1
 8001f86:	e7d1      	b.n	8001f2c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001f88:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001f8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f8e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f90:	f104 0018 	add.w	r0, r4, #24
 8001f94:	f7ff fa9f 	bl	80014d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7ff fa9c 	bl	80014d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fa0:	6839      	ldr	r1, [r7, #0]
 8001fa2:	2501      	movs	r5, #1
 8001fa4:	fa05 f302 	lsl.w	r3, r5, r2
 8001fa8:	2014      	movs	r0, #20
 8001faa:	430b      	orrs	r3, r1
 8001fac:	fb00 8002 	mla	r0, r0, r2, r8
 8001fb0:	4631      	mov	r1, r6
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	f7ff fa6c 	bl	8001490 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <xTaskResumeAll+0xe4>)
 8001fba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001fc2:	bf24      	itt	cs
 8001fc4:	4b05      	ldrcs	r3, [pc, #20]	; (8001fdc <xTaskResumeAll+0xdc>)
 8001fc6:	601d      	strcs	r5, [r3, #0]
 8001fc8:	e7be      	b.n	8001f48 <xTaskResumeAll+0x48>
 8001fca:	bf00      	nop
 8001fcc:	20003d54 	.word	0x20003d54
 8001fd0:	20003d48 	.word	0x20003d48
 8001fd4:	20003d5c 	.word	0x20003d5c
 8001fd8:	20003d50 	.word	0x20003d50
 8001fdc:	20003dd4 	.word	0x20003dd4
 8001fe0:	e000ed04 	.word	0xe000ed04
 8001fe4:	20003cb0 	.word	0x20003cb0
 8001fe8:	20003d90 	.word	0x20003d90
 8001fec:	20003cbc 	.word	0x20003cbc

08001ff0 <vTaskDelay>:
	{
 8001ff0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ff2:	b940      	cbnz	r0, 8002006 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <vTaskDelay+0x40>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <vTaskDelay+0x44>)
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	b141      	cbz	r1, 800201e <vTaskDelay+0x2e>
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	e7fe      	b.n	800201c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800201e:	f7ff fed5 	bl	8001dcc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002022:	f7ff fdf3 	bl	8001c0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002026:	f7ff ff6b 	bl	8001f00 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800202a:	2800      	cmp	r0, #0
 800202c:	d0e2      	beq.n	8001ff4 <vTaskDelay+0x4>
 800202e:	bd08      	pop	{r3, pc}
 8002030:	e000ed04 	.word	0xe000ed04
 8002034:	20003d54 	.word	0x20003d54

08002038 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <vTaskSwitchContext+0x60>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <vTaskSwitchContext+0x64>)
{
 800203e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002040:	b112      	cbz	r2, 8002048 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002042:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002048:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <vTaskSwitchContext+0x68>)
 800204c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f1c3 031f 	rsb	r3, r3, #31
 8002058:	2214      	movs	r2, #20
 800205a:	4912      	ldr	r1, [pc, #72]	; (80020a4 <vTaskSwitchContext+0x6c>)
 800205c:	435a      	muls	r2, r3
 800205e:	1888      	adds	r0, r1, r2
 8002060:	588c      	ldr	r4, [r1, r2]
 8002062:	b944      	cbnz	r4, 8002076 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	e7fe      	b.n	8002074 <vTaskSwitchContext+0x3c>
 8002076:	6844      	ldr	r4, [r0, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	6864      	ldr	r4, [r4, #4]
 800207c:	6044      	str	r4, [r0, #4]
 800207e:	440a      	add	r2, r1
 8002080:	4294      	cmp	r4, r2
 8002082:	bf04      	itt	eq
 8002084:	6862      	ldreq	r2, [r4, #4]
 8002086:	6042      	streq	r2, [r0, #4]
 8002088:	2214      	movs	r2, #20
 800208a:	fb02 1303 	mla	r3, r2, r3, r1
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <vTaskSwitchContext+0x70>)
 8002094:	e7d6      	b.n	8002044 <vTaskSwitchContext+0xc>
 8002096:	bf00      	nop
 8002098:	20003d54 	.word	0x20003d54
 800209c:	20003dd4 	.word	0x20003dd4
 80020a0:	20003d5c 	.word	0x20003d5c
 80020a4:	20003cbc 	.word	0x20003cbc
 80020a8:	20003cb0 	.word	0x20003cb0

080020ac <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <vApplicationGetIdleTaskMemory+0x10>)
 80020ae:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <vApplicationGetIdleTaskMemory+0x14>)
 80020b2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20003fd8 	.word	0x20003fd8
 80020c0:	20003dd8 	.word	0x20003dd8

080020c4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff f9cc 	bl	8001464 <osDelay>
 80020cc:	e7fb      	b.n	80020c6 <StartDefaultTask+0x2>

080020ce <Set_Pin_Output>:
{
 80020ce:	b530      	push	{r4, r5, lr}
 80020d0:	b087      	sub	sp, #28
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	2214      	movs	r2, #20
 80020d8:	2100      	movs	r1, #0
 80020da:	a801      	add	r0, sp, #4
 80020dc:	f000 fb63 	bl	80027a6 <memset>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80020e2:	a901      	add	r1, sp, #4
 80020e4:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 80020e6:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80020ea:	f7fe fad9 	bl	80006a0 <HAL_GPIO_Init>
}
 80020ee:	b007      	add	sp, #28
 80020f0:	bd30      	pop	{r4, r5, pc}

080020f2 <Set_Pin_Input>:
{
 80020f2:	b530      	push	{r4, r5, lr}
 80020f4:	b087      	sub	sp, #28
 80020f6:	4604      	mov	r4, r0
 80020f8:	460d      	mov	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	2214      	movs	r2, #20
 80020fc:	2100      	movs	r1, #0
 80020fe:	a801      	add	r0, sp, #4
 8002100:	f000 fb51 	bl	80027a6 <memset>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002104:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002106:	a901      	add	r1, sp, #4
 8002108:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_Pin;
 800210a:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800210e:	f7fe fac7 	bl	80006a0 <HAL_GPIO_Init>
}
 8002112:	b007      	add	sp, #28
 8002114:	bd30      	pop	{r4, r5, pc}
	...

08002118 <delay>:
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <delay+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim5))<time);}
 8002120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002122:	4282      	cmp	r2, r0
 8002124:	d3fc      	bcc.n	8002120 <delay+0x8>
 8002126:	4770      	bx	lr
 8002128:	20004048 	.word	0x20004048

0800212c <DHT11_Start>:
{
 800212c:	b510      	push	{r4, lr}
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800212e:	4c10      	ldr	r4, [pc, #64]	; (8002170 <DHT11_Start+0x44>)
 8002130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff ffca 	bl	80020ce <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002140:	4620      	mov	r0, r4
 8002142:	f7fe fb81 	bl	8000848 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8002146:	f244 6050 	movw	r0, #18000	; 0x4650
 800214a:	f7ff ffe5 	bl	8002118 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002152:	4620      	mov	r0, r4
 8002154:	2201      	movs	r2, #1
 8002156:	f7fe fb77 	bl	8000848 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 800215a:	2014      	movs	r0, #20
 800215c:	f7ff ffdc 	bl	8002118 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8002160:	4620      	mov	r0, r4
 8002162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8002166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800216a:	f7ff bfc2 	b.w	80020f2 <Set_Pin_Input>
 800216e:	bf00      	nop
 8002170:	40020000 	.word	0x40020000

08002174 <DHT11_Check_Response>:
{
 8002174:	b538      	push	{r3, r4, r5, lr}
	delay (40);
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f7ff ffce 	bl	8002118 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800217c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <DHT11_Check_Response+0x44>)
 8002182:	f7fe fb5b 	bl	800083c <HAL_GPIO_ReadPin>
 8002186:	b9a8      	cbnz	r0, 80021b4 <DHT11_Check_Response+0x40>
		delay (80);
 8002188:	2050      	movs	r0, #80	; 0x50
 800218a:	f7ff ffc5 	bl	8002118 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <DHT11_Check_Response+0x44>)
 8002194:	f7fe fb52 	bl	800083c <HAL_GPIO_ReadPin>
		else Response = -1; // 255
 8002198:	2800      	cmp	r0, #0
 800219a:	bf14      	ite	ne
 800219c:	2401      	movne	r4, #1
 800219e:	24ff      	moveq	r4, #255	; 0xff
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80021a0:	4d05      	ldr	r5, [pc, #20]	; (80021b8 <DHT11_Check_Response+0x44>)
 80021a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a6:	4628      	mov	r0, r5
 80021a8:	f7fe fb48 	bl	800083c <HAL_GPIO_ReadPin>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d1f8      	bne.n	80021a2 <DHT11_Check_Response+0x2e>
}
 80021b0:	4620      	mov	r0, r4
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t Response = 0;
 80021b4:	2400      	movs	r4, #0
 80021b6:	e7f3      	b.n	80021a0 <DHT11_Check_Response+0x2c>
 80021b8:	40020000 	.word	0x40020000

080021bc <DHT11_Read>:
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80021be:	4e13      	ldr	r6, [pc, #76]	; (800220c <DHT11_Read+0x50>)
{
 80021c0:	2400      	movs	r4, #0
 80021c2:	2507      	movs	r5, #7
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	4630      	mov	r0, r6
 80021ca:	f7fe fb37 	bl	800083c <HAL_GPIO_ReadPin>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d0f8      	beq.n	80021c4 <DHT11_Read+0x8>
		delay (40);   // wait for 40 us
 80021d2:	2028      	movs	r0, #40	; 0x28
 80021d4:	f7ff ffa0 	bl	8002118 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80021d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021dc:	4630      	mov	r0, r6
 80021de:	f7fe fb2d 	bl	800083c <HAL_GPIO_ReadPin>
 80021e2:	2301      	movs	r3, #1
			i&= ~(1<<(7-j));   // write 0
 80021e4:	40ab      	lsls	r3, r5
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80021e6:	b968      	cbnz	r0, 8002204 <DHT11_Read+0x48>
			i&= ~(1<<(7-j));   // write 0
 80021e8:	ea24 0403 	bic.w	r4, r4, r3
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80021ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f0:	4630      	mov	r0, r6
 80021f2:	f7fe fb23 	bl	800083c <HAL_GPIO_ReadPin>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d1f8      	bne.n	80021ec <DHT11_Read+0x30>
	for (j=0;j<8;j++)
 80021fa:	f115 35ff 	adds.w	r5, r5, #4294967295
 80021fe:	d2e1      	bcs.n	80021c4 <DHT11_Read+0x8>
}
 8002200:	4620      	mov	r0, r4
 8002202:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8002204:	431c      	orrs	r4, r3
 8002206:	b2e4      	uxtb	r4, r4
 8002208:	e7f0      	b.n	80021ec <DHT11_Read+0x30>
 800220a:	bf00      	nop
 800220c:	40020000 	.word	0x40020000

08002210 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002210:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartTask02 */
	char buffer[1999];
	HAL_TIM_Base_Start(&htim5);
 8002212:	4826      	ldr	r0, [pc, #152]	; (80022ac <StartTask02+0x9c>)

  /* Infinite loop */
  for(;;)
  {
	  DHT11_Start();
	  Presence = DHT11_Check_Response();
 8002214:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80022d8 <StartTask02+0xc8>
	  Rh_byte1 = DHT11_Read ();
 8002218:	4e25      	ldr	r6, [pc, #148]	; (80022b0 <StartTask02+0xa0>)
	  Rh_byte2 = DHT11_Read ();
 800221a:	4c26      	ldr	r4, [pc, #152]	; (80022b4 <StartTask02+0xa4>)
{
 800221c:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
	HAL_TIM_Base_Start(&htim5);
 8002220:	f7fe fdc6 	bl	8000db0 <HAL_TIM_Base_Start>
	 sprintf(buffer,"hello world\n\r");
 8002224:	4924      	ldr	r1, [pc, #144]	; (80022b8 <StartTask02+0xa8>)
 8002226:	a802      	add	r0, sp, #8
 8002228:	f000 faea 	bl	8002800 <strcpy>
	 HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 800222c:	a802      	add	r0, sp, #8
 800222e:	f7fd ffd7 	bl	80001e0 <strlen>
 8002232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002236:	b282      	uxth	r2, r0
 8002238:	a902      	add	r1, sp, #8
 800223a:	4820      	ldr	r0, [pc, #128]	; (80022bc <StartTask02+0xac>)
 800223c:	f7ff f886 	bl	800134c <HAL_UART_Transmit>
	  DHT11_Start();
 8002240:	f7ff ff74 	bl	800212c <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8002244:	f7ff ff96 	bl	8002174 <DHT11_Check_Response>
 8002248:	f888 0000 	strb.w	r0, [r8]
	  Rh_byte1 = DHT11_Read ();
 800224c:	f7ff ffb6 	bl	80021bc <DHT11_Read>
 8002250:	7030      	strb	r0, [r6, #0]
	  Rh_byte2 = DHT11_Read ();
 8002252:	f7ff ffb3 	bl	80021bc <DHT11_Read>
 8002256:	7020      	strb	r0, [r4, #0]
	  Temp_byte1 = DHT11_Read ();
 8002258:	f7ff ffb0 	bl	80021bc <DHT11_Read>
 800225c:	4f18      	ldr	r7, [pc, #96]	; (80022c0 <StartTask02+0xb0>)
	  Temp_byte2 = DHT11_Read ();
 800225e:	4d19      	ldr	r5, [pc, #100]	; (80022c4 <StartTask02+0xb4>)
	  Temp_byte1 = DHT11_Read ();
 8002260:	7038      	strb	r0, [r7, #0]
	  Temp_byte2 = DHT11_Read ();
 8002262:	f7ff ffab 	bl	80021bc <DHT11_Read>
 8002266:	7028      	strb	r0, [r5, #0]
	  SUM = DHT11_Read();
 8002268:	f7ff ffa8 	bl	80021bc <DHT11_Read>
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <StartTask02+0xb8>)
	  TEMP = Temp_byte1;
 800226e:	783a      	ldrb	r2, [r7, #0]
	  SUM = DHT11_Read();
 8002270:	8018      	strh	r0, [r3, #0]
	  TEMP = Temp_byte1;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <StartTask02+0xbc>)
	  RH = Rh_byte1;
 8002274:	7831      	ldrb	r1, [r6, #0]
	  TEMP = Temp_byte1;
 8002276:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <StartTask02+0xc0>)
	  //Temperature = (float) TEMP;
	 // Humidity = (float) RH;
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 800227a:	7820      	ldrb	r0, [r4, #0]
	  RH = Rh_byte1;
 800227c:	8019      	strh	r1, [r3, #0]
	  sprintf(buffer,"temp=%d.%d hum=%d.%d\n\r",Temp_byte1,Temp_byte2,Rh_byte1,Rh_byte2);
 800227e:	782b      	ldrb	r3, [r5, #0]
 8002280:	9001      	str	r0, [sp, #4]
 8002282:	9100      	str	r1, [sp, #0]
 8002284:	a802      	add	r0, sp, #8
 8002286:	4913      	ldr	r1, [pc, #76]	; (80022d4 <StartTask02+0xc4>)
 8002288:	f000 fa96 	bl	80027b8 <siprintf>
	  HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 800228c:	a802      	add	r0, sp, #8
 800228e:	f7fd ffa7 	bl	80001e0 <strlen>
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	b282      	uxth	r2, r0
 8002298:	a902      	add	r1, sp, #8
 800229a:	4808      	ldr	r0, [pc, #32]	; (80022bc <StartTask02+0xac>)
 800229c:	f7ff f856 	bl	800134c <HAL_UART_Transmit>
	 osDelay(1100);
 80022a0:	f240 404c 	movw	r0, #1100	; 0x44c
 80022a4:	f7ff f8de 	bl	8001464 <osDelay>
 80022a8:	e7ca      	b.n	8002240 <StartTask02+0x30>
 80022aa:	bf00      	nop
 80022ac:	20004048 	.word	0x20004048
 80022b0:	20004044 	.word	0x20004044
 80022b4:	20004090 	.word	0x20004090
 80022b8:	08003041 	.word	0x08003041
 80022bc:	20004094 	.word	0x20004094
 80022c0:	2000408a 	.word	0x2000408a
 80022c4:	200040d6 	.word	0x200040d6
 80022c8:	200040d4 	.word	0x200040d4
 80022cc:	20004088 	.word	0x20004088
 80022d0:	20004046 	.word	0x20004046
 80022d4:	0800304f 	.word	0x0800304f
 80022d8:	2000402c 	.word	0x2000402c

080022dc <SystemClock_Config>:
{
 80022dc:	b530      	push	{r4, r5, lr}
 80022de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e0:	2230      	movs	r2, #48	; 0x30
 80022e2:	2100      	movs	r1, #0
 80022e4:	a808      	add	r0, sp, #32
 80022e6:	f000 fa5e 	bl	80027a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ea:	2100      	movs	r1, #0
 80022ec:	2214      	movs	r2, #20
 80022ee:	a803      	add	r0, sp, #12
 80022f0:	f000 fa59 	bl	80027a6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f4:	2500      	movs	r5, #0
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <SystemClock_Config+0x90>)
 80022f8:	9501      	str	r5, [sp, #4]
 80022fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002304:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800230e:	9502      	str	r5, [sp, #8]
 8002310:	6813      	ldr	r3, [r2, #0]
 8002312:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002326:	2301      	movs	r3, #1
 8002328:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800232a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800232e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002330:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002334:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002336:	2304      	movs	r3, #4
 8002338:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800233a:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 800233e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002340:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002342:	2307      	movs	r3, #7
 8002344:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002346:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002348:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	f7fe fa83 	bl	8000854 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	230f      	movs	r3, #15
 8002350:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002352:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002358:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800235a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800235c:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800235e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002360:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002362:	f7fe fc4b 	bl	8000bfc <HAL_RCC_ClockConfig>
}
 8002366:	b015      	add	sp, #84	; 0x54
 8002368:	bd30      	pop	{r4, r5, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <main>:
{
 8002374:	b500      	push	{lr}
 8002376:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
  HAL_Init();
 800237a:	f7fe f911 	bl	80005a0 <HAL_Init>
  SystemClock_Config();
 800237e:	f7ff ffad 	bl	80022dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	2214      	movs	r2, #20
 8002384:	2100      	movs	r1, #0
 8002386:	a812      	add	r0, sp, #72	; 0x48
 8002388:	f000 fa0d 	bl	80027a6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238c:	2400      	movs	r4, #0
 800238e:	4b55      	ldr	r3, [pc, #340]	; (80024e4 <main+0x170>)
 8002390:	9400      	str	r4, [sp, #0]
 8002392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002394:	4854      	ldr	r0, [pc, #336]	; (80024e8 <main+0x174>)
  huart2.Instance = USART2;
 8002396:	4d55      	ldr	r5, [pc, #340]	; (80024ec <main+0x178>)
  htim5.Instance = TIM5;
 8002398:	4e55      	ldr	r6, [pc, #340]	; (80024f0 <main+0x17c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	f042 0204 	orr.w	r2, r2, #4
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	f002 0204 	and.w	r2, r2, #4
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023aa:	9401      	str	r4, [sp, #4]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	9402      	str	r4, [sp, #8]
 80023c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	f002 0201 	and.w	r2, r2, #1
 80023ce:	9202      	str	r2, [sp, #8]
 80023d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	9403      	str	r4, [sp, #12]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023e2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023e6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ea:	f7fe fa2d 	bl	8000848 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80023ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f2:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023f4:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <main+0x180>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023f8:	483f      	ldr	r0, [pc, #252]	; (80024f8 <main+0x184>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023fa:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f7fe f94f 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002402:	2320      	movs	r3, #32
 8002404:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002406:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800240a:	4837      	ldr	r0, [pc, #220]	; (80024e8 <main+0x174>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002412:	f7fe f945 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	a912      	add	r1, sp, #72	; 0x48
 800241c:	4832      	ldr	r0, [pc, #200]	; (80024e8 <main+0x174>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800241e:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f7fe f93c 	bl	80006a0 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002428:	4a34      	ldr	r2, [pc, #208]	; (80024fc <main+0x188>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 800242c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002430:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002434:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002436:	230c      	movs	r3, #12
 8002438:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800243a:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243c:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002442:	f7fe ff55 	bl	80012f0 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	2210      	movs	r2, #16
 8002448:	4621      	mov	r1, r4
 800244a:	a812      	add	r0, sp, #72	; 0x48
 800244c:	f000 f9ab 	bl	80027a6 <memset>
  htim5.Init.Prescaler = 83;
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <main+0x18c>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002452:	60b4      	str	r4, [r6, #8]
  htim5.Init.Prescaler = 83;
 8002454:	2353      	movs	r3, #83	; 0x53
 8002456:	e886 000a 	stmia.w	r6, {r1, r3}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800245a:	4630      	mov	r0, r6
  htim5.Init.Period = 0xffff-1;
 800245c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002460:	60f3      	str	r3, [r6, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	6134      	str	r4, [r6, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	940b      	str	r4, [sp, #44]	; 0x2c
 8002468:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800246a:	f7fe fdb7 	bl	8000fdc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002472:	a912      	add	r1, sp, #72	; 0x48
 8002474:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002476:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002478:	f7fe fdd4 	bl	8001024 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800247c:	a90b      	add	r1, sp, #44	; 0x2c
 800247e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002484:	f7fe fe62 	bl	800114c <HAL_TIMEx_MasterConfigSynchronization>
	 sprintf(buffer,"hello world\n\r");
 8002488:	491e      	ldr	r1, [pc, #120]	; (8002504 <main+0x190>)
 800248a:	a812      	add	r0, sp, #72	; 0x48
 800248c:	f000 f9b8 	bl	8002800 <strcpy>
	 HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 8002490:	a812      	add	r0, sp, #72	; 0x48
 8002492:	f7fd fea5 	bl	80001e0 <strlen>
 8002496:	b282      	uxth	r2, r0
 8002498:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800249a:	4d1b      	ldr	r5, [pc, #108]	; (8002508 <main+0x194>)
	 HAL_UART_Transmit(&huart2,buffer,strlen(buffer),1000);
 800249c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a0:	a912      	add	r1, sp, #72	; 0x48
 80024a2:	f7fe ff53 	bl	800134c <HAL_UART_Transmit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80024a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a8:	ae04      	add	r6, sp, #16
 80024aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024b0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80024b4:	4621      	mov	r1, r4
 80024b6:	a804      	add	r0, sp, #16
 80024b8:	f7fe ffac 	bl	8001414 <osThreadCreate>
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <main+0x198>)
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 2048);
 80024be:	350c      	adds	r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80024c0:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 2048);
 80024c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c4:	ae0b      	add	r6, sp, #44	; 0x2c
 80024c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024cc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80024d0:	4621      	mov	r1, r4
 80024d2:	a80b      	add	r0, sp, #44	; 0x2c
 80024d4:	f7fe ff9e 	bl	8001414 <osThreadCreate>
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <main+0x19c>)
 80024da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80024dc:	f7fe ff95 	bl	800140a <osKernelStart>
 80024e0:	e7fe      	b.n	80024e0 <main+0x16c>
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	20004094 	.word	0x20004094
 80024f0:	20004048 	.word	0x20004048
 80024f4:	10210000 	.word	0x10210000
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40004400 	.word	0x40004400
 8002500:	40000c00 	.word	0x40000c00
 8002504:	08003041 	.word	0x08003041
 8002508:	08003004 	.word	0x08003004
 800250c:	20004040 	.word	0x20004040
 8002510:	2000408c 	.word	0x2000408c

08002514 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002514:	6802      	ldr	r2, [r0, #0]
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002518:	429a      	cmp	r2, r3
 800251a:	d101      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800251c:	f7fe b85a 	b.w	80005d4 <HAL_IncTick>
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40000800 	.word	0x40000800

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_MspInit+0x40>)
 800252c:	2200      	movs	r2, #0
 800252e:	9200      	str	r2, [sp, #0]
 8002530:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002532:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002536:	6459      	str	r1, [r3, #68]	; 0x44
 8002538:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800253a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800253e:	9100      	str	r1, [sp, #0]
 8002540:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002546:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800254a:	6419      	str	r1, [r3, #64]	; 0x40
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002554:	210f      	movs	r1, #15
 8002556:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255c:	f7fe f85e 	bl	800061c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002560:	b003      	add	sp, #12
 8002562:	f85d fb04 	ldr.w	pc, [sp], #4
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM5)
 800256c:	6802      	ldr	r2, [r0, #0]
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_TIM_Base_MspInit+0x28>)
 8002570:	429a      	cmp	r2, r3
{
 8002572:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM5)
 8002574:	d10b      	bne.n	800258e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_TIM_Base_MspInit+0x2c>)
 800257c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800258e:	b002      	add	sp, #8
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	2214      	movs	r2, #20
 80025a4:	2100      	movs	r1, #0
 80025a6:	a803      	add	r0, sp, #12
 80025a8:	f000 f8fd 	bl	80027a6 <memset>
  if(huart->Instance==USART2)
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_UART_MspInit+0x60>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d120      	bne.n	80025f6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80025b8:	2100      	movs	r1, #0
 80025ba:	9101      	str	r1, [sp, #4]
 80025bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	4810      	ldr	r0, [pc, #64]	; (8002600 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
 80025c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025cc:	9201      	str	r2, [sp, #4]
 80025ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	9102      	str	r1, [sp, #8]
 80025d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025e4:	230c      	movs	r3, #12
 80025e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ee:	2307      	movs	r3, #7
 80025f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f7fe f855 	bl	80006a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025f6:	b008      	add	sp, #32
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	bf00      	nop
 80025fc:	40004400 	.word	0x40004400
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8002606:	4601      	mov	r1, r0
{
 8002608:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800260a:	2200      	movs	r2, #0
 800260c:	201e      	movs	r0, #30
 800260e:	f7fe f805 	bl	800061c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8002612:	201e      	movs	r0, #30
 8002614:	f7fe f836 	bl	8000684 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002618:	2500      	movs	r5, #0
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_InitTick+0x6c>)
 800261c:	9502      	str	r5, [sp, #8]
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002620:	4c14      	ldr	r4, [pc, #80]	; (8002674 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002622:	f042 0204 	orr.w	r2, r2, #4
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002630:	a901      	add	r1, sp, #4
 8002632:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002634:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002636:	f7fe fb9d 	bl	8000d74 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800263a:	f7fe fb7b 	bl	8000d34 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_InitTick+0x74>)
 8002640:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002642:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002646:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002648:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_InitTick+0x78>)
 800264c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002650:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8002652:	6060      	str	r0, [r4, #4]
  htim4.Init.ClockDivision = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002654:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8002656:	6125      	str	r5, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800265a:	f7fe fcbf 	bl	8000fdc <HAL_TIM_Base_Init>
 800265e:	b920      	cbnz	r0, 800266a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002660:	4620      	mov	r0, r4
 8002662:	f7fe fbb7 	bl	8000dd4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002666:	b009      	add	sp, #36	; 0x24
 8002668:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800266a:	2001      	movs	r0, #1
 800266c:	e7fb      	b.n	8002666 <HAL_InitTick+0x62>
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	200040d8 	.word	0x200040d8
 8002678:	40000800 	.word	0x40000800
 800267c:	000f4240 	.word	0x000f4240

08002680 <NMI_Handler>:
 8002680:	4770      	bx	lr

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	e7fe      	b.n	8002682 <HardFault_Handler>

08002684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	e7fe      	b.n	8002686 <BusFault_Handler>

08002688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler>

0800268a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268a:	4770      	bx	lr

0800268c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800268c:	4801      	ldr	r0, [pc, #4]	; (8002694 <TIM4_IRQHandler+0x8>)
 800268e:	f7fe bbb5 	b.w	8000dfc <HAL_TIM_IRQHandler>
 8002692:	bf00      	nop
 8002694:	200040d8 	.word	0x200040d8

08002698 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002698:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <_sbrk+0x2c>)
 800269c:	6819      	ldr	r1, [r3, #0]
{
 800269e:	4602      	mov	r2, r0
	if (heap_end == 0)
 80026a0:	b909      	cbnz	r1, 80026a6 <_sbrk+0xe>
		heap_end = &end;
 80026a2:	4909      	ldr	r1, [pc, #36]	; (80026c8 <_sbrk+0x30>)
 80026a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80026a6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80026a8:	4669      	mov	r1, sp
 80026aa:	4402      	add	r2, r0
 80026ac:	428a      	cmp	r2, r1
 80026ae:	d906      	bls.n	80026be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80026b0:	f000 f844 	bl	800273c <__errno>
 80026b4:	230c      	movs	r3, #12
 80026b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80026be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80026c0:	bd08      	pop	{r3, pc}
 80026c2:	bf00      	nop
 80026c4:	20004030 	.word	0x20004030
 80026c8:	2000411c 	.word	0x2000411c

080026cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SystemInit+0x18>)
 80026ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80026d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002720 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ee:	e003      	b.n	80026f8 <LoopCopyDataInit>

080026f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026f6:	3104      	adds	r1, #4

080026f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026f8:	480b      	ldr	r0, [pc, #44]	; (8002728 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002700:	d3f6      	bcc.n	80026f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002704:	e002      	b.n	800270c <LoopFillZerobss>

08002706 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002706:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002708:	f842 3b04 	str.w	r3, [r2], #4

0800270c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800270e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002710:	d3f9      	bcc.n	8002706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002712:	f7ff ffdb 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002716:	f000 f817 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800271a:	f7ff fe2b 	bl	8002374 <main>
  bx  lr    
 800271e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002720:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002724:	080030d8 	.word	0x080030d8
  ldr  r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800272c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002730:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002734:	2000411c 	.word	0x2000411c

08002738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002738:	e7fe      	b.n	8002738 <ADC_IRQHandler>
	...

0800273c <__errno>:
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <__errno+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000010 	.word	0x20000010

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	4e0d      	ldr	r6, [pc, #52]	; (8002780 <__libc_init_array+0x38>)
 800274c:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 800274e:	1ba4      	subs	r4, r4, r6
 8002750:	10a4      	asrs	r4, r4, #2
 8002752:	2500      	movs	r5, #0
 8002754:	42a5      	cmp	r5, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	4e0b      	ldr	r6, [pc, #44]	; (8002788 <__libc_init_array+0x40>)
 800275a:	4c0c      	ldr	r4, [pc, #48]	; (800278c <__libc_init_array+0x44>)
 800275c:	f000 fc46 	bl	8002fec <_init>
 8002760:	1ba4      	subs	r4, r4, r6
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	2500      	movs	r5, #0
 8002766:	42a5      	cmp	r5, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002770:	4798      	blx	r3
 8002772:	3501      	adds	r5, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277a:	4798      	blx	r3
 800277c:	3501      	adds	r5, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	080030d0 	.word	0x080030d0
 8002784:	080030d0 	.word	0x080030d0
 8002788:	080030d0 	.word	0x080030d0
 800278c:	080030d4 	.word	0x080030d4

08002790 <memcpy>:
 8002790:	b510      	push	{r4, lr}
 8002792:	1e43      	subs	r3, r0, #1
 8002794:	440a      	add	r2, r1
 8002796:	4291      	cmp	r1, r2
 8002798:	d100      	bne.n	800279c <memcpy+0xc>
 800279a:	bd10      	pop	{r4, pc}
 800279c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027a4:	e7f7      	b.n	8002796 <memcpy+0x6>

080027a6 <memset>:
 80027a6:	4402      	add	r2, r0
 80027a8:	4603      	mov	r3, r0
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d100      	bne.n	80027b0 <memset+0xa>
 80027ae:	4770      	bx	lr
 80027b0:	f803 1b01 	strb.w	r1, [r3], #1
 80027b4:	e7f9      	b.n	80027aa <memset+0x4>
	...

080027b8 <siprintf>:
 80027b8:	b40e      	push	{r1, r2, r3}
 80027ba:	b500      	push	{lr}
 80027bc:	b09c      	sub	sp, #112	; 0x70
 80027be:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027c2:	ab1d      	add	r3, sp, #116	; 0x74
 80027c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80027c8:	9002      	str	r0, [sp, #8]
 80027ca:	9006      	str	r0, [sp, #24]
 80027cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027d0:	480a      	ldr	r0, [pc, #40]	; (80027fc <siprintf+0x44>)
 80027d2:	9104      	str	r1, [sp, #16]
 80027d4:	9107      	str	r1, [sp, #28]
 80027d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027da:	f853 2b04 	ldr.w	r2, [r3], #4
 80027de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027e2:	6800      	ldr	r0, [r0, #0]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	a902      	add	r1, sp, #8
 80027e8:	f000 f86e 	bl	80028c8 <_svfiprintf_r>
 80027ec:	9b02      	ldr	r3, [sp, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	b01c      	add	sp, #112	; 0x70
 80027f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027f8:	b003      	add	sp, #12
 80027fa:	4770      	bx	lr
 80027fc:	20000010 	.word	0x20000010

08002800 <strcpy>:
 8002800:	4603      	mov	r3, r0
 8002802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002806:	f803 2b01 	strb.w	r2, [r3], #1
 800280a:	2a00      	cmp	r2, #0
 800280c:	d1f9      	bne.n	8002802 <strcpy+0x2>
 800280e:	4770      	bx	lr

08002810 <__ssputs_r>:
 8002810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002814:	688e      	ldr	r6, [r1, #8]
 8002816:	429e      	cmp	r6, r3
 8002818:	4682      	mov	sl, r0
 800281a:	460c      	mov	r4, r1
 800281c:	4691      	mov	r9, r2
 800281e:	4698      	mov	r8, r3
 8002820:	d835      	bhi.n	800288e <__ssputs_r+0x7e>
 8002822:	898a      	ldrh	r2, [r1, #12]
 8002824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002828:	d031      	beq.n	800288e <__ssputs_r+0x7e>
 800282a:	6825      	ldr	r5, [r4, #0]
 800282c:	6909      	ldr	r1, [r1, #16]
 800282e:	1a6f      	subs	r7, r5, r1
 8002830:	6965      	ldr	r5, [r4, #20]
 8002832:	2302      	movs	r3, #2
 8002834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002838:	fb95 f5f3 	sdiv	r5, r5, r3
 800283c:	f108 0301 	add.w	r3, r8, #1
 8002840:	443b      	add	r3, r7
 8002842:	429d      	cmp	r5, r3
 8002844:	bf38      	it	cc
 8002846:	461d      	movcc	r5, r3
 8002848:	0553      	lsls	r3, r2, #21
 800284a:	d531      	bpl.n	80028b0 <__ssputs_r+0xa0>
 800284c:	4629      	mov	r1, r5
 800284e:	f000 fb2d 	bl	8002eac <_malloc_r>
 8002852:	4606      	mov	r6, r0
 8002854:	b950      	cbnz	r0, 800286c <__ssputs_r+0x5c>
 8002856:	230c      	movs	r3, #12
 8002858:	f8ca 3000 	str.w	r3, [sl]
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002862:	81a3      	strh	r3, [r4, #12]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800286c:	463a      	mov	r2, r7
 800286e:	6921      	ldr	r1, [r4, #16]
 8002870:	f7ff ff8e 	bl	8002790 <memcpy>
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	81a3      	strh	r3, [r4, #12]
 8002880:	6126      	str	r6, [r4, #16]
 8002882:	6165      	str	r5, [r4, #20]
 8002884:	443e      	add	r6, r7
 8002886:	1bed      	subs	r5, r5, r7
 8002888:	6026      	str	r6, [r4, #0]
 800288a:	60a5      	str	r5, [r4, #8]
 800288c:	4646      	mov	r6, r8
 800288e:	4546      	cmp	r6, r8
 8002890:	bf28      	it	cs
 8002892:	4646      	movcs	r6, r8
 8002894:	4632      	mov	r2, r6
 8002896:	4649      	mov	r1, r9
 8002898:	6820      	ldr	r0, [r4, #0]
 800289a:	f000 fa9f 	bl	8002ddc <memmove>
 800289e:	68a3      	ldr	r3, [r4, #8]
 80028a0:	1b9b      	subs	r3, r3, r6
 80028a2:	60a3      	str	r3, [r4, #8]
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	441e      	add	r6, r3
 80028a8:	6026      	str	r6, [r4, #0]
 80028aa:	2000      	movs	r0, #0
 80028ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b0:	462a      	mov	r2, r5
 80028b2:	f000 fb59 	bl	8002f68 <_realloc_r>
 80028b6:	4606      	mov	r6, r0
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1e1      	bne.n	8002880 <__ssputs_r+0x70>
 80028bc:	6921      	ldr	r1, [r4, #16]
 80028be:	4650      	mov	r0, sl
 80028c0:	f000 faa6 	bl	8002e10 <_free_r>
 80028c4:	e7c7      	b.n	8002856 <__ssputs_r+0x46>
	...

080028c8 <_svfiprintf_r>:
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	b09d      	sub	sp, #116	; 0x74
 80028ce:	4680      	mov	r8, r0
 80028d0:	9303      	str	r3, [sp, #12]
 80028d2:	898b      	ldrh	r3, [r1, #12]
 80028d4:	061c      	lsls	r4, r3, #24
 80028d6:	460d      	mov	r5, r1
 80028d8:	4616      	mov	r6, r2
 80028da:	d50f      	bpl.n	80028fc <_svfiprintf_r+0x34>
 80028dc:	690b      	ldr	r3, [r1, #16]
 80028de:	b96b      	cbnz	r3, 80028fc <_svfiprintf_r+0x34>
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	f000 fae3 	bl	8002eac <_malloc_r>
 80028e6:	6028      	str	r0, [r5, #0]
 80028e8:	6128      	str	r0, [r5, #16]
 80028ea:	b928      	cbnz	r0, 80028f8 <_svfiprintf_r+0x30>
 80028ec:	230c      	movs	r3, #12
 80028ee:	f8c8 3000 	str.w	r3, [r8]
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295
 80028f6:	e0c5      	b.n	8002a84 <_svfiprintf_r+0x1bc>
 80028f8:	2340      	movs	r3, #64	; 0x40
 80028fa:	616b      	str	r3, [r5, #20]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002900:	2320      	movs	r3, #32
 8002902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002906:	2330      	movs	r3, #48	; 0x30
 8002908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800290c:	f04f 0b01 	mov.w	fp, #1
 8002910:	4637      	mov	r7, r6
 8002912:	463c      	mov	r4, r7
 8002914:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13c      	bne.n	8002996 <_svfiprintf_r+0xce>
 800291c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002920:	d00b      	beq.n	800293a <_svfiprintf_r+0x72>
 8002922:	4653      	mov	r3, sl
 8002924:	4632      	mov	r2, r6
 8002926:	4629      	mov	r1, r5
 8002928:	4640      	mov	r0, r8
 800292a:	f7ff ff71 	bl	8002810 <__ssputs_r>
 800292e:	3001      	adds	r0, #1
 8002930:	f000 80a3 	beq.w	8002a7a <_svfiprintf_r+0x1b2>
 8002934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002936:	4453      	add	r3, sl
 8002938:	9309      	str	r3, [sp, #36]	; 0x24
 800293a:	783b      	ldrb	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 809c 	beq.w	8002a7a <_svfiprintf_r+0x1b2>
 8002942:	2300      	movs	r3, #0
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	9304      	str	r3, [sp, #16]
 800294a:	9307      	str	r3, [sp, #28]
 800294c:	9205      	str	r2, [sp, #20]
 800294e:	9306      	str	r3, [sp, #24]
 8002950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002954:	931a      	str	r3, [sp, #104]	; 0x68
 8002956:	2205      	movs	r2, #5
 8002958:	7821      	ldrb	r1, [r4, #0]
 800295a:	4850      	ldr	r0, [pc, #320]	; (8002a9c <_svfiprintf_r+0x1d4>)
 800295c:	f7fd fc48 	bl	80001f0 <memchr>
 8002960:	1c67      	adds	r7, r4, #1
 8002962:	9b04      	ldr	r3, [sp, #16]
 8002964:	b9d8      	cbnz	r0, 800299e <_svfiprintf_r+0xd6>
 8002966:	06d9      	lsls	r1, r3, #27
 8002968:	bf44      	itt	mi
 800296a:	2220      	movmi	r2, #32
 800296c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002970:	071a      	lsls	r2, r3, #28
 8002972:	bf44      	itt	mi
 8002974:	222b      	movmi	r2, #43	; 0x2b
 8002976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800297a:	7822      	ldrb	r2, [r4, #0]
 800297c:	2a2a      	cmp	r2, #42	; 0x2a
 800297e:	d016      	beq.n	80029ae <_svfiprintf_r+0xe6>
 8002980:	9a07      	ldr	r2, [sp, #28]
 8002982:	2100      	movs	r1, #0
 8002984:	200a      	movs	r0, #10
 8002986:	4627      	mov	r7, r4
 8002988:	3401      	adds	r4, #1
 800298a:	783b      	ldrb	r3, [r7, #0]
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	2b09      	cmp	r3, #9
 8002990:	d951      	bls.n	8002a36 <_svfiprintf_r+0x16e>
 8002992:	b1c9      	cbz	r1, 80029c8 <_svfiprintf_r+0x100>
 8002994:	e011      	b.n	80029ba <_svfiprintf_r+0xf2>
 8002996:	2b25      	cmp	r3, #37	; 0x25
 8002998:	d0c0      	beq.n	800291c <_svfiprintf_r+0x54>
 800299a:	4627      	mov	r7, r4
 800299c:	e7b9      	b.n	8002912 <_svfiprintf_r+0x4a>
 800299e:	4a3f      	ldr	r2, [pc, #252]	; (8002a9c <_svfiprintf_r+0x1d4>)
 80029a0:	1a80      	subs	r0, r0, r2
 80029a2:	fa0b f000 	lsl.w	r0, fp, r0
 80029a6:	4318      	orrs	r0, r3
 80029a8:	9004      	str	r0, [sp, #16]
 80029aa:	463c      	mov	r4, r7
 80029ac:	e7d3      	b.n	8002956 <_svfiprintf_r+0x8e>
 80029ae:	9a03      	ldr	r2, [sp, #12]
 80029b0:	1d11      	adds	r1, r2, #4
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	9103      	str	r1, [sp, #12]
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	db01      	blt.n	80029be <_svfiprintf_r+0xf6>
 80029ba:	9207      	str	r2, [sp, #28]
 80029bc:	e004      	b.n	80029c8 <_svfiprintf_r+0x100>
 80029be:	4252      	negs	r2, r2
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	9207      	str	r2, [sp, #28]
 80029c6:	9304      	str	r3, [sp, #16]
 80029c8:	783b      	ldrb	r3, [r7, #0]
 80029ca:	2b2e      	cmp	r3, #46	; 0x2e
 80029cc:	d10e      	bne.n	80029ec <_svfiprintf_r+0x124>
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	2b2a      	cmp	r3, #42	; 0x2a
 80029d2:	f107 0101 	add.w	r1, r7, #1
 80029d6:	d132      	bne.n	8002a3e <_svfiprintf_r+0x176>
 80029d8:	9b03      	ldr	r3, [sp, #12]
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	9203      	str	r2, [sp, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bfb8      	it	lt
 80029e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80029e8:	3702      	adds	r7, #2
 80029ea:	9305      	str	r3, [sp, #20]
 80029ec:	4c2c      	ldr	r4, [pc, #176]	; (8002aa0 <_svfiprintf_r+0x1d8>)
 80029ee:	7839      	ldrb	r1, [r7, #0]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fd fbfc 	bl	80001f0 <memchr>
 80029f8:	b138      	cbz	r0, 8002a0a <_svfiprintf_r+0x142>
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	1b00      	subs	r0, r0, r4
 80029fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002a02:	9b04      	ldr	r3, [sp, #16]
 8002a04:	4303      	orrs	r3, r0
 8002a06:	9304      	str	r3, [sp, #16]
 8002a08:	3701      	adds	r7, #1
 8002a0a:	7839      	ldrb	r1, [r7, #0]
 8002a0c:	4825      	ldr	r0, [pc, #148]	; (8002aa4 <_svfiprintf_r+0x1dc>)
 8002a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a12:	2206      	movs	r2, #6
 8002a14:	1c7e      	adds	r6, r7, #1
 8002a16:	f7fd fbeb 	bl	80001f0 <memchr>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d035      	beq.n	8002a8a <_svfiprintf_r+0x1c2>
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <_svfiprintf_r+0x1e0>)
 8002a20:	b9fb      	cbnz	r3, 8002a62 <_svfiprintf_r+0x19a>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	3307      	adds	r3, #7
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	444b      	add	r3, r9
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	e76c      	b.n	8002910 <_svfiprintf_r+0x48>
 8002a36:	fb00 3202 	mla	r2, r0, r2, r3
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	e7a3      	b.n	8002986 <_svfiprintf_r+0xbe>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9305      	str	r3, [sp, #20]
 8002a42:	4618      	mov	r0, r3
 8002a44:	240a      	movs	r4, #10
 8002a46:	460f      	mov	r7, r1
 8002a48:	3101      	adds	r1, #1
 8002a4a:	783a      	ldrb	r2, [r7, #0]
 8002a4c:	3a30      	subs	r2, #48	; 0x30
 8002a4e:	2a09      	cmp	r2, #9
 8002a50:	d903      	bls.n	8002a5a <_svfiprintf_r+0x192>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ca      	beq.n	80029ec <_svfiprintf_r+0x124>
 8002a56:	9005      	str	r0, [sp, #20]
 8002a58:	e7c8      	b.n	80029ec <_svfiprintf_r+0x124>
 8002a5a:	fb04 2000 	mla	r0, r4, r0, r2
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e7f1      	b.n	8002a46 <_svfiprintf_r+0x17e>
 8002a62:	ab03      	add	r3, sp, #12
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	462a      	mov	r2, r5
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <_svfiprintf_r+0x1e4>)
 8002a6a:	a904      	add	r1, sp, #16
 8002a6c:	4640      	mov	r0, r8
 8002a6e:	f3af 8000 	nop.w
 8002a72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a76:	4681      	mov	r9, r0
 8002a78:	d1d9      	bne.n	8002a2e <_svfiprintf_r+0x166>
 8002a7a:	89ab      	ldrh	r3, [r5, #12]
 8002a7c:	065b      	lsls	r3, r3, #25
 8002a7e:	f53f af38 	bmi.w	80028f2 <_svfiprintf_r+0x2a>
 8002a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a84:	b01d      	add	sp, #116	; 0x74
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8a:	ab03      	add	r3, sp, #12
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	462a      	mov	r2, r5
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <_svfiprintf_r+0x1e4>)
 8002a92:	a904      	add	r1, sp, #16
 8002a94:	4640      	mov	r0, r8
 8002a96:	f000 f881 	bl	8002b9c <_printf_i>
 8002a9a:	e7ea      	b.n	8002a72 <_svfiprintf_r+0x1aa>
 8002a9c:	08003093 	.word	0x08003093
 8002aa0:	08003099 	.word	0x08003099
 8002aa4:	0800309d 	.word	0x0800309d
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	08002811 	.word	0x08002811

08002ab0 <_printf_common>:
 8002ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab4:	4691      	mov	r9, r2
 8002ab6:	461f      	mov	r7, r3
 8002ab8:	688a      	ldr	r2, [r1, #8]
 8002aba:	690b      	ldr	r3, [r1, #16]
 8002abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bfb8      	it	lt
 8002ac4:	4613      	movlt	r3, r2
 8002ac6:	f8c9 3000 	str.w	r3, [r9]
 8002aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ace:	4606      	mov	r6, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	b112      	cbz	r2, 8002ada <_printf_common+0x2a>
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f8c9 3000 	str.w	r3, [r9]
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	0699      	lsls	r1, r3, #26
 8002ade:	bf42      	ittt	mi
 8002ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ae4:	3302      	addmi	r3, #2
 8002ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8002aea:	6825      	ldr	r5, [r4, #0]
 8002aec:	f015 0506 	ands.w	r5, r5, #6
 8002af0:	d107      	bne.n	8002b02 <_printf_common+0x52>
 8002af2:	f104 0a19 	add.w	sl, r4, #25
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	f8d9 2000 	ldr.w	r2, [r9]
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	429d      	cmp	r5, r3
 8002b00:	db29      	blt.n	8002b56 <_printf_common+0xa6>
 8002b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	3300      	adds	r3, #0
 8002b0a:	bf18      	it	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	0692      	lsls	r2, r2, #26
 8002b10:	d42e      	bmi.n	8002b70 <_printf_common+0xc0>
 8002b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b16:	4639      	mov	r1, r7
 8002b18:	4630      	mov	r0, r6
 8002b1a:	47c0      	blx	r8
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d021      	beq.n	8002b64 <_printf_common+0xb4>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	68e5      	ldr	r5, [r4, #12]
 8002b24:	f8d9 2000 	ldr.w	r2, [r9]
 8002b28:	f003 0306 	and.w	r3, r3, #6
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	bf08      	it	eq
 8002b30:	1aad      	subeq	r5, r5, r2
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	6922      	ldr	r2, [r4, #16]
 8002b36:	bf0c      	ite	eq
 8002b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b3c:	2500      	movne	r5, #0
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	bfc4      	itt	gt
 8002b42:	1a9b      	subgt	r3, r3, r2
 8002b44:	18ed      	addgt	r5, r5, r3
 8002b46:	f04f 0900 	mov.w	r9, #0
 8002b4a:	341a      	adds	r4, #26
 8002b4c:	454d      	cmp	r5, r9
 8002b4e:	d11b      	bne.n	8002b88 <_printf_common+0xd8>
 8002b50:	2000      	movs	r0, #0
 8002b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b56:	2301      	movs	r3, #1
 8002b58:	4652      	mov	r2, sl
 8002b5a:	4639      	mov	r1, r7
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	47c0      	blx	r8
 8002b60:	3001      	adds	r0, #1
 8002b62:	d103      	bne.n	8002b6c <_printf_common+0xbc>
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6c:	3501      	adds	r5, #1
 8002b6e:	e7c2      	b.n	8002af6 <_printf_common+0x46>
 8002b70:	18e1      	adds	r1, r4, r3
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	2030      	movs	r0, #48	; 0x30
 8002b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b7a:	4422      	add	r2, r4
 8002b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b84:	3302      	adds	r3, #2
 8002b86:	e7c4      	b.n	8002b12 <_printf_common+0x62>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	4639      	mov	r1, r7
 8002b8e:	4630      	mov	r0, r6
 8002b90:	47c0      	blx	r8
 8002b92:	3001      	adds	r0, #1
 8002b94:	d0e6      	beq.n	8002b64 <_printf_common+0xb4>
 8002b96:	f109 0901 	add.w	r9, r9, #1
 8002b9a:	e7d7      	b.n	8002b4c <_printf_common+0x9c>

08002b9c <_printf_i>:
 8002b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba0:	4617      	mov	r7, r2
 8002ba2:	7e0a      	ldrb	r2, [r1, #24]
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	2a6e      	cmp	r2, #110	; 0x6e
 8002ba8:	4698      	mov	r8, r3
 8002baa:	4606      	mov	r6, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bb0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002bb4:	f000 80bc 	beq.w	8002d30 <_printf_i+0x194>
 8002bb8:	d81a      	bhi.n	8002bf0 <_printf_i+0x54>
 8002bba:	2a63      	cmp	r2, #99	; 0x63
 8002bbc:	d02e      	beq.n	8002c1c <_printf_i+0x80>
 8002bbe:	d80a      	bhi.n	8002bd6 <_printf_i+0x3a>
 8002bc0:	2a00      	cmp	r2, #0
 8002bc2:	f000 80c8 	beq.w	8002d56 <_printf_i+0x1ba>
 8002bc6:	2a58      	cmp	r2, #88	; 0x58
 8002bc8:	f000 808a 	beq.w	8002ce0 <_printf_i+0x144>
 8002bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002bd4:	e02a      	b.n	8002c2c <_printf_i+0x90>
 8002bd6:	2a64      	cmp	r2, #100	; 0x64
 8002bd8:	d001      	beq.n	8002bde <_printf_i+0x42>
 8002bda:	2a69      	cmp	r2, #105	; 0x69
 8002bdc:	d1f6      	bne.n	8002bcc <_printf_i+0x30>
 8002bde:	6821      	ldr	r1, [r4, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002be6:	d023      	beq.n	8002c30 <_printf_i+0x94>
 8002be8:	1d11      	adds	r1, r2, #4
 8002bea:	6019      	str	r1, [r3, #0]
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	e027      	b.n	8002c40 <_printf_i+0xa4>
 8002bf0:	2a73      	cmp	r2, #115	; 0x73
 8002bf2:	f000 80b4 	beq.w	8002d5e <_printf_i+0x1c2>
 8002bf6:	d808      	bhi.n	8002c0a <_printf_i+0x6e>
 8002bf8:	2a6f      	cmp	r2, #111	; 0x6f
 8002bfa:	d02a      	beq.n	8002c52 <_printf_i+0xb6>
 8002bfc:	2a70      	cmp	r2, #112	; 0x70
 8002bfe:	d1e5      	bne.n	8002bcc <_printf_i+0x30>
 8002c00:	680a      	ldr	r2, [r1, #0]
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	600a      	str	r2, [r1, #0]
 8002c08:	e003      	b.n	8002c12 <_printf_i+0x76>
 8002c0a:	2a75      	cmp	r2, #117	; 0x75
 8002c0c:	d021      	beq.n	8002c52 <_printf_i+0xb6>
 8002c0e:	2a78      	cmp	r2, #120	; 0x78
 8002c10:	d1dc      	bne.n	8002bcc <_printf_i+0x30>
 8002c12:	2278      	movs	r2, #120	; 0x78
 8002c14:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002c18:	496e      	ldr	r1, [pc, #440]	; (8002dd4 <_printf_i+0x238>)
 8002c1a:	e064      	b.n	8002ce6 <_printf_i+0x14a>
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002c22:	1d11      	adds	r1, r2, #4
 8002c24:	6019      	str	r1, [r3, #0]
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0a3      	b.n	8002d78 <_printf_i+0x1dc>
 8002c30:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c34:	f102 0104 	add.w	r1, r2, #4
 8002c38:	6019      	str	r1, [r3, #0]
 8002c3a:	d0d7      	beq.n	8002bec <_printf_i+0x50>
 8002c3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	da03      	bge.n	8002c4c <_printf_i+0xb0>
 8002c44:	222d      	movs	r2, #45	; 0x2d
 8002c46:	425b      	negs	r3, r3
 8002c48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c4c:	4962      	ldr	r1, [pc, #392]	; (8002dd8 <_printf_i+0x23c>)
 8002c4e:	220a      	movs	r2, #10
 8002c50:	e017      	b.n	8002c82 <_printf_i+0xe6>
 8002c52:	6820      	ldr	r0, [r4, #0]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c5a:	d003      	beq.n	8002c64 <_printf_i+0xc8>
 8002c5c:	1d08      	adds	r0, r1, #4
 8002c5e:	6018      	str	r0, [r3, #0]
 8002c60:	680b      	ldr	r3, [r1, #0]
 8002c62:	e006      	b.n	8002c72 <_printf_i+0xd6>
 8002c64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c68:	f101 0004 	add.w	r0, r1, #4
 8002c6c:	6018      	str	r0, [r3, #0]
 8002c6e:	d0f7      	beq.n	8002c60 <_printf_i+0xc4>
 8002c70:	880b      	ldrh	r3, [r1, #0]
 8002c72:	4959      	ldr	r1, [pc, #356]	; (8002dd8 <_printf_i+0x23c>)
 8002c74:	2a6f      	cmp	r2, #111	; 0x6f
 8002c76:	bf14      	ite	ne
 8002c78:	220a      	movne	r2, #10
 8002c7a:	2208      	moveq	r2, #8
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c82:	6865      	ldr	r5, [r4, #4]
 8002c84:	60a5      	str	r5, [r4, #8]
 8002c86:	2d00      	cmp	r5, #0
 8002c88:	f2c0 809c 	blt.w	8002dc4 <_printf_i+0x228>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	f020 0004 	bic.w	r0, r0, #4
 8002c92:	6020      	str	r0, [r4, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d13f      	bne.n	8002d18 <_printf_i+0x17c>
 8002c98:	2d00      	cmp	r5, #0
 8002c9a:	f040 8095 	bne.w	8002dc8 <_printf_i+0x22c>
 8002c9e:	4675      	mov	r5, lr
 8002ca0:	2a08      	cmp	r2, #8
 8002ca2:	d10b      	bne.n	8002cbc <_printf_i+0x120>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	07da      	lsls	r2, r3, #31
 8002ca8:	d508      	bpl.n	8002cbc <_printf_i+0x120>
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	bfde      	ittt	le
 8002cb2:	2330      	movle	r3, #48	; 0x30
 8002cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cbc:	ebae 0305 	sub.w	r3, lr, r5
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	f8cd 8000 	str.w	r8, [sp]
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	aa03      	add	r2, sp, #12
 8002cca:	4621      	mov	r1, r4
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f7ff feef 	bl	8002ab0 <_printf_common>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d155      	bne.n	8002d82 <_printf_i+0x1e6>
 8002cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cda:	b005      	add	sp, #20
 8002cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ce0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ce4:	493c      	ldr	r1, [pc, #240]	; (8002dd8 <_printf_i+0x23c>)
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cee:	f100 0504 	add.w	r5, r0, #4
 8002cf2:	601d      	str	r5, [r3, #0]
 8002cf4:	d001      	beq.n	8002cfa <_printf_i+0x15e>
 8002cf6:	6803      	ldr	r3, [r0, #0]
 8002cf8:	e002      	b.n	8002d00 <_printf_i+0x164>
 8002cfa:	0655      	lsls	r5, r2, #25
 8002cfc:	d5fb      	bpl.n	8002cf6 <_printf_i+0x15a>
 8002cfe:	8803      	ldrh	r3, [r0, #0]
 8002d00:	07d0      	lsls	r0, r2, #31
 8002d02:	bf44      	itt	mi
 8002d04:	f042 0220 	orrmi.w	r2, r2, #32
 8002d08:	6022      	strmi	r2, [r4, #0]
 8002d0a:	b91b      	cbnz	r3, 8002d14 <_printf_i+0x178>
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	f022 0220 	bic.w	r2, r2, #32
 8002d12:	6022      	str	r2, [r4, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	e7b1      	b.n	8002c7c <_printf_i+0xe0>
 8002d18:	4675      	mov	r5, lr
 8002d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d1e:	fb02 3310 	mls	r3, r2, r0, r3
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d1f5      	bne.n	8002d1a <_printf_i+0x17e>
 8002d2e:	e7b7      	b.n	8002ca0 <_printf_i+0x104>
 8002d30:	6808      	ldr	r0, [r1, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	6949      	ldr	r1, [r1, #20]
 8002d36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d3a:	d004      	beq.n	8002d46 <_printf_i+0x1aa>
 8002d3c:	1d10      	adds	r0, r2, #4
 8002d3e:	6018      	str	r0, [r3, #0]
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	6019      	str	r1, [r3, #0]
 8002d44:	e007      	b.n	8002d56 <_printf_i+0x1ba>
 8002d46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d4a:	f102 0004 	add.w	r0, r2, #4
 8002d4e:	6018      	str	r0, [r3, #0]
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	d0f6      	beq.n	8002d42 <_printf_i+0x1a6>
 8002d54:	8019      	strh	r1, [r3, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	6123      	str	r3, [r4, #16]
 8002d5a:	4675      	mov	r5, lr
 8002d5c:	e7b1      	b.n	8002cc2 <_printf_i+0x126>
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	1d11      	adds	r1, r2, #4
 8002d62:	6019      	str	r1, [r3, #0]
 8002d64:	6815      	ldr	r5, [r2, #0]
 8002d66:	6862      	ldr	r2, [r4, #4]
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f7fd fa40 	bl	80001f0 <memchr>
 8002d70:	b108      	cbz	r0, 8002d76 <_printf_i+0x1da>
 8002d72:	1b40      	subs	r0, r0, r5
 8002d74:	6060      	str	r0, [r4, #4]
 8002d76:	6863      	ldr	r3, [r4, #4]
 8002d78:	6123      	str	r3, [r4, #16]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d80:	e79f      	b.n	8002cc2 <_printf_i+0x126>
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	462a      	mov	r2, r5
 8002d86:	4639      	mov	r1, r7
 8002d88:	4630      	mov	r0, r6
 8002d8a:	47c0      	blx	r8
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d0a2      	beq.n	8002cd6 <_printf_i+0x13a>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	079b      	lsls	r3, r3, #30
 8002d94:	d507      	bpl.n	8002da6 <_printf_i+0x20a>
 8002d96:	2500      	movs	r5, #0
 8002d98:	f104 0919 	add.w	r9, r4, #25
 8002d9c:	68e3      	ldr	r3, [r4, #12]
 8002d9e:	9a03      	ldr	r2, [sp, #12]
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	429d      	cmp	r5, r3
 8002da4:	db05      	blt.n	8002db2 <_printf_i+0x216>
 8002da6:	68e0      	ldr	r0, [r4, #12]
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	4298      	cmp	r0, r3
 8002dac:	bfb8      	it	lt
 8002dae:	4618      	movlt	r0, r3
 8002db0:	e793      	b.n	8002cda <_printf_i+0x13e>
 8002db2:	2301      	movs	r3, #1
 8002db4:	464a      	mov	r2, r9
 8002db6:	4639      	mov	r1, r7
 8002db8:	4630      	mov	r0, r6
 8002dba:	47c0      	blx	r8
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d08a      	beq.n	8002cd6 <_printf_i+0x13a>
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7eb      	b.n	8002d9c <_printf_i+0x200>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1a7      	bne.n	8002d18 <_printf_i+0x17c>
 8002dc8:	780b      	ldrb	r3, [r1, #0]
 8002dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd2:	e765      	b.n	8002ca0 <_printf_i+0x104>
 8002dd4:	080030b5 	.word	0x080030b5
 8002dd8:	080030a4 	.word	0x080030a4

08002ddc <memmove>:
 8002ddc:	4288      	cmp	r0, r1
 8002dde:	b510      	push	{r4, lr}
 8002de0:	eb01 0302 	add.w	r3, r1, r2
 8002de4:	d803      	bhi.n	8002dee <memmove+0x12>
 8002de6:	1e42      	subs	r2, r0, #1
 8002de8:	4299      	cmp	r1, r3
 8002dea:	d10c      	bne.n	8002e06 <memmove+0x2a>
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	4298      	cmp	r0, r3
 8002df0:	d2f9      	bcs.n	8002de6 <memmove+0xa>
 8002df2:	1881      	adds	r1, r0, r2
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	42d3      	cmn	r3, r2
 8002df8:	d100      	bne.n	8002dfc <memmove+0x20>
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e04:	e7f7      	b.n	8002df6 <memmove+0x1a>
 8002e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e0e:	e7eb      	b.n	8002de8 <memmove+0xc>

08002e10 <_free_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4605      	mov	r5, r0
 8002e14:	2900      	cmp	r1, #0
 8002e16:	d045      	beq.n	8002ea4 <_free_r+0x94>
 8002e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e1c:	1f0c      	subs	r4, r1, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bfb8      	it	lt
 8002e22:	18e4      	addlt	r4, r4, r3
 8002e24:	f000 f8d6 	bl	8002fd4 <__malloc_lock>
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <_free_r+0x98>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	b933      	cbnz	r3, 8002e3e <_free_r+0x2e>
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	6014      	str	r4, [r2, #0]
 8002e34:	4628      	mov	r0, r5
 8002e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e3a:	f000 b8cc 	b.w	8002fd6 <__malloc_unlock>
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	d90c      	bls.n	8002e5c <_free_r+0x4c>
 8002e42:	6821      	ldr	r1, [r4, #0]
 8002e44:	1862      	adds	r2, r4, r1
 8002e46:	4293      	cmp	r3, r2
 8002e48:	bf04      	itt	eq
 8002e4a:	681a      	ldreq	r2, [r3, #0]
 8002e4c:	685b      	ldreq	r3, [r3, #4]
 8002e4e:	6063      	str	r3, [r4, #4]
 8002e50:	bf04      	itt	eq
 8002e52:	1852      	addeq	r2, r2, r1
 8002e54:	6022      	streq	r2, [r4, #0]
 8002e56:	6004      	str	r4, [r0, #0]
 8002e58:	e7ec      	b.n	8002e34 <_free_r+0x24>
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	b10a      	cbz	r2, 8002e64 <_free_r+0x54>
 8002e60:	42a2      	cmp	r2, r4
 8002e62:	d9fa      	bls.n	8002e5a <_free_r+0x4a>
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	1858      	adds	r0, r3, r1
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d10b      	bne.n	8002e84 <_free_r+0x74>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	4401      	add	r1, r0
 8002e70:	1858      	adds	r0, r3, r1
 8002e72:	4282      	cmp	r2, r0
 8002e74:	6019      	str	r1, [r3, #0]
 8002e76:	d1dd      	bne.n	8002e34 <_free_r+0x24>
 8002e78:	6810      	ldr	r0, [r2, #0]
 8002e7a:	6852      	ldr	r2, [r2, #4]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	4401      	add	r1, r0
 8002e80:	6019      	str	r1, [r3, #0]
 8002e82:	e7d7      	b.n	8002e34 <_free_r+0x24>
 8002e84:	d902      	bls.n	8002e8c <_free_r+0x7c>
 8002e86:	230c      	movs	r3, #12
 8002e88:	602b      	str	r3, [r5, #0]
 8002e8a:	e7d3      	b.n	8002e34 <_free_r+0x24>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	1821      	adds	r1, r4, r0
 8002e90:	428a      	cmp	r2, r1
 8002e92:	bf04      	itt	eq
 8002e94:	6811      	ldreq	r1, [r2, #0]
 8002e96:	6852      	ldreq	r2, [r2, #4]
 8002e98:	6062      	str	r2, [r4, #4]
 8002e9a:	bf04      	itt	eq
 8002e9c:	1809      	addeq	r1, r1, r0
 8002e9e:	6021      	streq	r1, [r4, #0]
 8002ea0:	605c      	str	r4, [r3, #4]
 8002ea2:	e7c7      	b.n	8002e34 <_free_r+0x24>
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20004034 	.word	0x20004034

08002eac <_malloc_r>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	1ccd      	adds	r5, r1, #3
 8002eb0:	f025 0503 	bic.w	r5, r5, #3
 8002eb4:	3508      	adds	r5, #8
 8002eb6:	2d0c      	cmp	r5, #12
 8002eb8:	bf38      	it	cc
 8002eba:	250c      	movcc	r5, #12
 8002ebc:	2d00      	cmp	r5, #0
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	db01      	blt.n	8002ec6 <_malloc_r+0x1a>
 8002ec2:	42a9      	cmp	r1, r5
 8002ec4:	d903      	bls.n	8002ece <_malloc_r+0x22>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	6033      	str	r3, [r6, #0]
 8002eca:	2000      	movs	r0, #0
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
 8002ece:	f000 f881 	bl	8002fd4 <__malloc_lock>
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <_malloc_r+0xb4>)
 8002ed4:	6814      	ldr	r4, [r2, #0]
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	b991      	cbnz	r1, 8002f00 <_malloc_r+0x54>
 8002eda:	4c22      	ldr	r4, [pc, #136]	; (8002f64 <_malloc_r+0xb8>)
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	b91b      	cbnz	r3, 8002ee8 <_malloc_r+0x3c>
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 f867 	bl	8002fb4 <_sbrk_r>
 8002ee6:	6020      	str	r0, [r4, #0]
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4630      	mov	r0, r6
 8002eec:	f000 f862 	bl	8002fb4 <_sbrk_r>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d126      	bne.n	8002f42 <_malloc_r+0x96>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	6033      	str	r3, [r6, #0]
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f000 f86c 	bl	8002fd6 <__malloc_unlock>
 8002efe:	e7e4      	b.n	8002eca <_malloc_r+0x1e>
 8002f00:	680b      	ldr	r3, [r1, #0]
 8002f02:	1b5b      	subs	r3, r3, r5
 8002f04:	d41a      	bmi.n	8002f3c <_malloc_r+0x90>
 8002f06:	2b0b      	cmp	r3, #11
 8002f08:	d90f      	bls.n	8002f2a <_malloc_r+0x7e>
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	50cd      	str	r5, [r1, r3]
 8002f0e:	18cc      	adds	r4, r1, r3
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 f860 	bl	8002fd6 <__malloc_unlock>
 8002f16:	f104 000b 	add.w	r0, r4, #11
 8002f1a:	1d23      	adds	r3, r4, #4
 8002f1c:	f020 0007 	bic.w	r0, r0, #7
 8002f20:	1ac3      	subs	r3, r0, r3
 8002f22:	d01b      	beq.n	8002f5c <_malloc_r+0xb0>
 8002f24:	425a      	negs	r2, r3
 8002f26:	50e2      	str	r2, [r4, r3]
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
 8002f2a:	428c      	cmp	r4, r1
 8002f2c:	bf0d      	iteet	eq
 8002f2e:	6863      	ldreq	r3, [r4, #4]
 8002f30:	684b      	ldrne	r3, [r1, #4]
 8002f32:	6063      	strne	r3, [r4, #4]
 8002f34:	6013      	streq	r3, [r2, #0]
 8002f36:	bf18      	it	ne
 8002f38:	460c      	movne	r4, r1
 8002f3a:	e7e9      	b.n	8002f10 <_malloc_r+0x64>
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	6849      	ldr	r1, [r1, #4]
 8002f40:	e7ca      	b.n	8002ed8 <_malloc_r+0x2c>
 8002f42:	1cc4      	adds	r4, r0, #3
 8002f44:	f024 0403 	bic.w	r4, r4, #3
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d005      	beq.n	8002f58 <_malloc_r+0xac>
 8002f4c:	1a21      	subs	r1, r4, r0
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f000 f830 	bl	8002fb4 <_sbrk_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d0cd      	beq.n	8002ef4 <_malloc_r+0x48>
 8002f58:	6025      	str	r5, [r4, #0]
 8002f5a:	e7d9      	b.n	8002f10 <_malloc_r+0x64>
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	bf00      	nop
 8002f60:	20004034 	.word	0x20004034
 8002f64:	20004038 	.word	0x20004038

08002f68 <_realloc_r>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	4607      	mov	r7, r0
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	460e      	mov	r6, r1
 8002f70:	b921      	cbnz	r1, 8002f7c <_realloc_r+0x14>
 8002f72:	4611      	mov	r1, r2
 8002f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f78:	f7ff bf98 	b.w	8002eac <_malloc_r>
 8002f7c:	b922      	cbnz	r2, 8002f88 <_realloc_r+0x20>
 8002f7e:	f7ff ff47 	bl	8002e10 <_free_r>
 8002f82:	4625      	mov	r5, r4
 8002f84:	4628      	mov	r0, r5
 8002f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f88:	f000 f826 	bl	8002fd8 <_malloc_usable_size_r>
 8002f8c:	4284      	cmp	r4, r0
 8002f8e:	d90f      	bls.n	8002fb0 <_realloc_r+0x48>
 8002f90:	4621      	mov	r1, r4
 8002f92:	4638      	mov	r0, r7
 8002f94:	f7ff ff8a 	bl	8002eac <_malloc_r>
 8002f98:	4605      	mov	r5, r0
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d0f2      	beq.n	8002f84 <_realloc_r+0x1c>
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	f7ff fbf5 	bl	8002790 <memcpy>
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f7ff ff31 	bl	8002e10 <_free_r>
 8002fae:	e7e9      	b.n	8002f84 <_realloc_r+0x1c>
 8002fb0:	4635      	mov	r5, r6
 8002fb2:	e7e7      	b.n	8002f84 <_realloc_r+0x1c>

08002fb4 <_sbrk_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4c06      	ldr	r4, [pc, #24]	; (8002fd0 <_sbrk_r+0x1c>)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	4605      	mov	r5, r0
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	f7ff fb6a 	bl	8002698 <_sbrk>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_sbrk_r+0x1a>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_sbrk_r+0x1a>
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	20004118 	.word	0x20004118

08002fd4 <__malloc_lock>:
 8002fd4:	4770      	bx	lr

08002fd6 <__malloc_unlock>:
 8002fd6:	4770      	bx	lr

08002fd8 <_malloc_usable_size_r>:
 8002fd8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	f1a0 0004 	sub.w	r0, r0, #4
 8002fe2:	bfbc      	itt	lt
 8002fe4:	580b      	ldrlt	r3, [r1, r0]
 8002fe6:	18c0      	addlt	r0, r0, r3
 8002fe8:	4770      	bx	lr
	...

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
